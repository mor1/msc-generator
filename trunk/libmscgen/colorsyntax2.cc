
#line 3 "<stdout>"

#define COLOR_SYNTAX_HIGHLIGHT 1
#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE csh_restart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via csh_restart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void csh_restart (FILE *input_file ,yyscan_t yyscanner );
void csh__switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE csh__create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void csh__delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void csh__flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void csh_push_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void csh_pop_buffer_state (yyscan_t yyscanner );

static void csh_ensure_buffer_stack (yyscan_t yyscanner );
static void csh__load_buffer_state (yyscan_t yyscanner );
static void csh__init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER csh__flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE csh__scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE csh__scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE csh__scan_bytes (yyconst char *bytes,int len ,yyscan_t yyscanner );

void *csh_alloc (yy_size_t ,yyscan_t yyscanner );
void *csh_realloc (void *,yy_size_t ,yyscan_t yyscanner );
void csh_free (void * ,yyscan_t yyscanner );

#define yy_new_buffer csh__create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        csh_ensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            csh__create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        csh_ensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            csh__create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define csh_wrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 119
#define YY_END_OF_BUFFER 120
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[389] =
    {   0,
        0,    0,  120,  119,    5,    2,    3,  112,    4,   90,
       82,   84,   81,  119,  113,  110,   85,   66,   83,   65,
      114,  114,    8,  114,    9,  114,  114,   12,    7,    6,
      114,  114,  114,  114,   10,   11,  114,  114,   88,   89,
      114,  114,  114,  114,  114,  114,  114,  114,  114,  114,
       86,   87,    5,    1,  112,  111,  112,    4,   77,  113,
       80,   76,   56,    0,   78,    0,  113,  113,  109,  110,
      108,  109,   71,  110,   57,   72,   63,   60,   67,   79,
       59,   62,    0,    0,    0,  114,  114,  114,   28,  114,
      114,  114,  114,  114,  114,  114,  114,  114,  114,  114,

      114,  114,  114,  114,  114,  114,  114,  114,  114,  114,
      114,  114,  114,  114,  114,  114,  114,  114,  114,  114,
      114,  114,   75,  114,  114,  114,  111,  113,  113,   55,
       74,   54,    0,  113,  109,  109,  109,  108,  107,  108,
      109,  109,  109,  109,   58,   73,   69,    0,   61,   68,
      116,  117,  115,  115,  115,  114,  114,  114,  114,   22,
      114,   37,  114,  114,  114,  114,  114,  114,  114,  114,
      114,  114,  114,  114,   13,  114,  114,  114,  114,  114,
      114,  114,  114,  114,  114,  114,  114,  114,  114,  114,
      114,  114,  114,  114,  114,  113,    0,    0,  109,  109,

      109,  109,  107,  109,  109,  109,  109,  109,  109,  109,
      109,    0,   64,    0,  116,    0,  117,   53,  114,  114,
      114,  114,  114,  114,  114,  114,  114,  114,  114,  114,
       34,  114,   30,   29,   24,  114,   41,  114,  114,  114,
       23,  114,  114,   52,  114,   33,  114,  114,   47,  114,
      114,  114,  114,   23,  114,  118,    0,  109,  109,  109,
      109,  109,  109,   70,  116,  116,  117,  117,  114,   21,
       48,  114,  114,  114,  114,  114,  114,  114,  114,  114,
      114,  114,  114,  114,   15,  114,  114,  114,   50,   32,
      114,  114,   45,  114,  114,   21,    0,    0,    0,    0,

      114,    0,  118,  116,  117,  114,  114,   31,  114,  114,
      114,  114,  114,  114,  114,  114,  114,   39,  114,  114,
      114,  114,  114,   40,  114,   38,    0,    0,   96,   92,
       91,   94,   93,  114,  118,  118,  116,  117,  114,   49,
       42,  114,  114,  114,  114,  114,   43,  114,   14,   20,
       26,  114,   51,  114,  114,   95,   98,   97,  114,  118,
       35,  114,   17,  114,   16,   18,   44,   25,   46,   27,
       27,  118,  114,   19,    0,    0,    0,    0,  105,   36,
      100,   99,  103,  102,  101,  106,  104,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    1,    1,    1,    1,    1,
        1,    7,    8,    9,   10,   11,    1,   12,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   14,   15,   16,
       17,   18,    1,    1,   19,   20,   21,   22,   23,   24,
       25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
       28,   35,   36,   37,   38,   39,   40,   41,   42,   28,
       43,   44,   45,    1,   28,    1,   46,   47,   48,   49,

       50,   51,   52,   53,   54,   28,   55,   56,   57,   58,
       59,   60,   28,   61,   62,   63,   64,   65,   66,   67,
       68,   28,   69,    1,   70,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[72] =
    {   0,
        1,    1,    2,    2,    1,    1,    1,    3,    3,    3,
        4,    5,    5,    1,    6,    1,    1,    1,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    6,    1,    1,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    6,    1,
        1
    } ;

static yyconst flex_int16_t yy_base[403] =
    {   0,
        0,    0,  340, 2488,  333, 2488,  324,   67,    0, 2488,
       65, 2488,   71,  312,   79,   91, 2488,   84,   57,  283,
       95,  151,  113,  117,  139,  143,  109,  181,  190,  217,
      236,  246,  256,  297,  288,  310,  338,  169, 2488, 2488,
      238,  357,  361,  368,  373,  401,  416,  430,  442,  450,
     2488, 2488,  256, 2488,   90, 2488,  124,    0, 2488,   74,
     2488,  242, 2488,    0,  228,   67,  101,  209,   93,  139,
      125,  461,  150,  442,  219,  193,   90,  188, 2488, 2488,
      185, 2488,  152,  161,  532,  262,  470,  506,  282,  511,
      515,  543,  549,  555,  575,  585,  570,  606,  614,  618,

      634,  638,  642,  646,  661,  665,  675,  688,  692,  682,
      710,  714,  718,  724,  737,  744,  755,  750,  763,  776,
      782,  786,  175,  790,  800,  816,  126,  183,  203, 2488,
     2488, 2488,  221,  229,  218,  823,  804,  161, 2488,  204,
      839,  850,  869,  883, 2488, 2488,  167,  164, 2488, 2488,
      269,  868, 2488,  238,  248,  892,  914,  933,  937,  953,
      957,  961,  965,  980,  985,  999, 1004,  989, 1008, 1030,
     1035, 1014, 1055, 1059, 1063, 1074, 1086, 1090, 1094, 1102,
     1114, 1122, 1135, 1130, 1141, 1148, 1164, 1173, 1168, 1181,
     1198, 1207, 1230, 1213, 1234,  264,  275,  300, 1213, 1240,

     1252, 1262,  224, 1279, 1298, 1312, 1328, 1345, 1358, 1394,
      278,  157, 2488,  291,  316,  319,  326, 1239, 1327, 1376,
     1412, 1436, 1441, 1445, 1460, 1464, 1468, 1487, 1491, 1501,
     1306, 1516, 1507, 1524, 1530, 1534, 1548, 1552, 1557, 1561,
     1568, 1573, 1584, 1588, 1595, 1610, 1614, 1618, 1629, 1634,
     1638, 1645, 1651, 1661, 1677,  346,  341, 1667, 1683, 1697,
     1713, 1727, 1743, 2488,  374,  385,  390,  421, 1792, 1691,
     1712, 1796, 1807, 1812, 1818, 1822, 1826, 1839, 1845, 1855,
     1865, 1871, 1885, 1891, 1896, 1901, 1922, 1917, 1928, 1940,
     1945, 1949, 1953, 1962, 1966, 1976,  489,  432, 2016,  140,

     1988,  350,  598,  401,  477, 1992, 2003, 2033, 2037, 2041,
     2059, 2054, 2067, 2080, 2088, 2094, 2104, 2111, 2124, 2115,
     2131, 2135, 2142, 2150, 2154, 2158,  555,  137,  121, 2488,
     2488, 2488, 2488, 2168,  767,  625,  578,  585, 2174, 2180,
     2184, 2193, 2197, 2208, 2212, 2217, 2233, 2238, 2242, 2246,
     2255, 2260, 2264, 2268, 2272, 2488, 2488, 2488, 2276,  608,
     2284, 2288, 2299, 2303, 2311, 2328, 2332, 2336, 2344, 2348,
     2354,  646, 2358, 2365,  820,  845,  122,  646,   58, 2369,
     2488, 2488, 2488, 2488, 2488, 2488, 2488, 2488, 2408, 2414,
     2420, 2423, 2428, 2434, 2439, 2445, 2451, 2457, 2463, 2469,

     2475, 2481
    } ;

static yyconst flex_int16_t yy_def[403] =
    {   0,
      388,    1,  388,  388,  388,  388,  388,  389,  390,  388,
      388,  388,  388,  388,  388,  391,  388,  388,  388,  388,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  388,  388,
       22,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      388,  388,  388,  388,  389,  388,  389,  390,  388,  388,
      388,  388,  388,  393,  388,  388,  388,  388,  394,  391,
      395,  396,  394,  391,  388,  388,  388,  388,  388,  388,
      388,  388,  388,  388,  397,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,

      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  388,  392,  392,  392,  389,  388,  388,  388,
      388,  388,  388,  388,  394,  398,  394,  395,  388,  395,
      396,  399,  396,  400,  388,  388,  388,  388,  388,  388,
      388,  388,  388,  388,  388,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  388,  388,  388,  398,  398,

      398,  401,  395,  399,  399,  399,  402,  396,  399,  400,
      394,  388,  388,  388,  388,  388,  388,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  388,  388,  398,  398,  401,
      399,  399,  402,  388,  388,  388,  388,  388,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  388,  388,  397,  388,

      392,  388,  388,  388,  388,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  388,  388,  388,  388,
      388,  388,  388,  392,  388,  388,  388,  388,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  388,  388,  388,  392,  388,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  388,  392,  392,  388,  388,  299,  388,  388,  392,
      388,  388,  388,  388,  388,  388,  388,    0,  388,  388,
      388,  388,  388,  388,  388,  388,  388,  388,  388,  388,

      388,  388
    } ;

static yyconst flex_int16_t yy_nxt[2560] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   15,   16,   17,   18,   19,   20,   21,   22,
       23,   24,   25,   26,   27,   28,   27,   27,   27,   29,
       30,   31,   32,   33,   34,   35,   36,   27,   37,   27,
       38,   27,   39,    4,   40,   21,   41,   42,   24,   43,
       26,   27,   44,   27,   27,   45,   46,   31,   32,   47,
       34,   48,   49,   27,   50,   27,   38,   27,   51,   52,
        4,   56,   59,   80,   81,  387,   60,   60,  133,  133,
       62,   61,   60,   60,  128,  129,  129,   66,   63,   67,
       68,   68,   70,   75,   56,   71,   72,   76,  136,   77,

       78,   79,   83,   84,   83,   85,  147,  148,   73,   66,
       57,   64,  134,  134,   87,   88,   83,   84,   83,   85,
       83,   84,   83,   85,   83,   84,   83,   85,  127,  139,
       56,   89,  384,   57,   74,   94,  137,   64,  358,   96,
       70,   87,   88,   71,   72,   95,   83,   84,   83,   85,
       83,   84,   83,   85,  357,  136,  333,   89,   83,   84,
       83,   85,   94,  151,  151,  139,   96,   57,  140,   57,
       97,   95,  152,  152,  264,   98,   83,   84,  123,   85,
       90,  213,   74,   91,  212,   92,  151,  151,   83,   84,
       83,   85,   93,  137,  196,  196,   97,   83,   84,   83,

       85,   98,  150,   99,  140,  149,   90,  100,  203,   91,
      146,   92,  102,  128,  129,  129,  101,   66,   93,   67,
       68,   68,  103,  136,   83,   84,   83,   85,  139,  197,
       99,  198,  133,  133,  100,  104,  145,   66,  132,  102,
      134,  134,  101,   83,   84,   83,   85,  140,  103,  151,
      151,  130,  105,   83,   84,   83,   85,   53,  106,  152,
      152,  137,  104,   83,   84,   83,   85,  140,  107,   83,
       84,   83,   85,  108,  110,  196,  196,  214,  105,  215,
      151,  151,  111,  136,  109,  106,  256,  256,  112,   83,
       84,   83,   85,  124,  107,   83,   84,   83,   85,  108,

       82,  110,  265,  265,   83,   84,   83,   85,  197,  111,
      109,  257,  257,  116,  112,  113,  114,   83,   84,   83,
       85,  137,   65,  115,  214,  117,   54,  266,  266,  118,
      267,  267,  119,  216,   53,  216,  120,  268,  268,  388,
      116,  388,  113,  114,  388,   83,   84,   83,   85,  197,
      115,  117,  257,  257,  302,  118,  303,  256,  256,  119,
      121,  335,  335,  120,   83,   84,   83,   85,   83,   84,
       83,   85,  388,  122,  388,   83,   84,   83,   85,   94,
       83,   84,   83,   85,  304,  265,  265,  121,  388,   95,
       99,  388,   97,  214,  100,  102,  266,  266,  388,  122,

      305,  267,  267,  101,  388,  103,   94,  388,   83,   84,
       83,   85,  337,  337,  388,   95,  388,   99,   97,  104,
      388,  100,  102,   83,   84,   83,   85,  388,  216,  101,
      216,  103,  268,  268,  110,  388,  105,   83,   84,   83,
       85,  331,  111,  151,  151,  388,  104,  388,  112,   83,
       84,   83,   85,  388,  388,  116,   69,   83,   84,   83,
       85,  110,  105,  388,  119,  388,  142,  117,  120,  125,
      388,  118,  121,  388,  112,  143,  388,   83,   84,   83,
       85,  388,  116,  388,   69,  122,  388,  388,  338,  338,
      388,  119,  388,  117,  388,  120,  330,  118,  388,  126,

      151,  151,  157,  143,  144,  388,  135,  388,  388,  135,
       69,  122,  388,   83,   84,   83,   85,  388,   83,   84,
       83,   85,   83,   84,   83,   85,  388,  135,  157,  143,
      388,  135,  153,  153,  153,  153,  153,  153,  153,  154,
      155,  154,  158,  159,  388,  153,  153,  153,  153,  153,
       83,   84,   83,   85,  388,  160,   83,   84,   83,   85,
      388,  161,   83,   84,   83,   85,  151,  151,  158,  159,
      388,  162,  356,  388,  153,  153,  153,   83,   84,   83,
       85,  160,   83,   84,   83,   85,  163,  388,  161,  337,
      337,  167,   83,   84,   83,   85,  338,  338,  162,  388,

      153,  153,  153,  165,  388,  164,  302,  388,  166,  336,
      336,  388,  163,   83,   84,   83,   85,  388,  167,  372,
      372,   83,   84,   83,   85,   83,   84,   83,   85,  388,
      165,  164,  169,  302,  388,  166,  336,  336,  168,  170,
      388,   83,   84,   83,   85,   83,   84,   83,   85,   83,
       84,   83,   85,   83,   84,   83,   85,  372,  372,  169,
      388,  172,  385,  386,  168,  388,  170,  171,   83,   84,
       83,   85,   83,   84,   83,   85,  388,  173,  388,  388,
      174,  175,   83,   84,   83,   85,  388,  388,  172,   83,
       84,   83,   85,  171,  388,   83,   84,   83,   85,   83,

       84,   83,   85,  173,  176,  388,  174,  388,  175,  178,
      388,  177,  388,  388,  179,  388,  180,   83,   84,   83,
       85,   83,   84,   83,   85,   83,   84,   83,   85,  388,
      176,   83,   84,   83,   85,  388,  178,  177,  388,  388,
      182,  179,  180,  181,   83,   84,   83,   85,  388,  183,
      388,   83,   84,   83,   85,  388,  184,   83,   84,   83,
       85,  185,   83,   84,   83,   85,  388,  182,  388,  181,
       83,   84,   83,   85,  187,  183,  186,  360,  335,  335,
      188,  388,  184,   83,   84,   83,   85,  388,  185,   83,
       84,   83,   85,   83,   84,   83,   85,   83,   84,   83,

       85,  187,  186,  189,  388,  388,  188,   83,   84,   83,
       85,  388,  190,  388,  388,  388,  191,  388,  135,  192,
      388,  388,  159,   83,   84,   83,   85,  381,  200,  189,
      388,  151,  151,  181,  135,  388,  388,  201,  190,  388,
      388,  388,  191,  388,  142,  192,  135,  388,  193,  388,
      191,  388,  388,  143,  382,  205,  151,  151,  388,  194,
      388,  141,  383,  388,  206,  201,  202,  388,  135,  388,
      388,  135,  135,  388,  142,  216,  195,  216,  217,  152,
      152,  143,  144,  143,  135,  388,  388,  135,  209,  135,
      388,  201,  206,  207,  141,  135,  388,  141,  135,   83,

       84,   83,   85,  388,  388,  135,  388,  143,  388,  135,
      388,  143,  144,  388,  135,  388,  135,  135,  206,  388,
      199,   83,   84,   83,   85,  141,  210,  388,  135,  388,
      388,  135,  388,  388,  388,  135,  388,  143,  388,  135,
       83,   84,   83,   85,   83,   84,   83,   85,  388,  135,
      388,  141,  388,  211,  218,  388,  388,  220,  388,  219,
       83,   84,   83,   85,   83,   84,   83,   85,   83,   84,
       83,   85,   83,   84,   83,   85,  388,  221,  388,  388,
      218,  388,  388,  388,  220,  388,  219,   83,   84,   83,
       85,  388,   83,   84,   83,   85,   83,   84,   83,   85,

      388,  222,  388,  388,  221,  224,   83,   84,   83,   85,
      223,   83,   84,   83,   85,   83,   84,   83,   85,  225,
      226,   83,   84,   83,   85,  229,  388,  222,  388,  230,
      388,  388,  224,  388,  227,  228,  223,   83,   84,   83,
       85,  388,   83,   84,   83,   85,  225,  226,  388,  388,
      233,  229,  231,  232,  388,  388,  230,  388,  388,  388,
      227,  228,   83,   84,   83,   85,   83,   84,   83,   85,
       83,   84,   83,   85,  388,  388,  233,  388,  388,  231,
      232,   83,   84,   83,   85,  388,  388,  235,  388,  388,
      388,  234,  388,   83,   84,   83,   85,   83,   84,   83,

       85,   83,   84,   83,   85,  388,  388,  236,  237,   83,
       84,   83,   85,  235,  238,  388,  388,  234,  388,  388,
      240,   83,   84,   83,   85,  388,  388,  388,  239,   83,
       84,   83,   85,  236,  388,  237,  241,   83,   84,   83,
       85,  238,   83,   84,   83,   85,  388,  240,   83,   84,
       83,   85,  388,  242,  239,   83,   84,   83,   85,  243,
      388,  388,  388,  241,  388,  388,  245,  388,  388,  388,
      244,   83,   84,   83,   85,   83,   84,   83,   85,  242,
       83,   84,   83,   85,  388,  388,  243,  246,   83,   84,
       83,   85,  248,  245,  388,  388,  244,  388,  388,  388,

      247,  388,  388,  388,  249,   83,   84,   83,   85,  388,
      250,  388,  388,  246,   83,   84,   83,   85,  200,  248,
       83,   84,   83,   85,  135,  252,  247,  201,  388,  388,
      249,  388,  388,  388,  251,  241,  250,   83,   84,   83,
       85,   83,   84,   83,   85,  200,   83,   84,   83,   85,
      220,  135,  252,  388,  201,  201,  202,  200,  135,  388,
      251,  135,  254,  135,  388,  388,  201,  259,  388,  388,
      251,  388,  388,  135,  388,  388,  199,  253,  388,  135,
      388,  201,  201,  202,  205,  135,  388,  388,  135,  388,
      141,  388,  388,  206,  201,  202,  255,  135,  388,  388,

      135,  388,  388,  205,  199,  260,  135,  135,  201,  141,
      135,  388,  206,   83,   84,   83,   85,  205,  135,  388,
      201,  206,  207,  141,  135,  388,  206,  135,  135,  388,
      199,  388,  388,  262,   83,   84,   83,   85,  388,  141,
      206,  207,  204,  135,  388,  135,  135,  206,  388,  199,
      142,  388,  388,  388,  206,  207,  388,  135,  388,  143,
      135,  388,  388,  205,  135,  269,  206,  388,  199,  141,
      204,  263,  206,  135,  388,  388,  135,  388,  135,  388,
      206,  388,  199,   83,   84,   83,   85,  143,  144,  388,
      135,  269,  388,  135,  135,  388,  204,  388,  258,  209,

      206,  207,  388,  135,  270,  141,  135,  388,  141,  388,
      388,  135,  388,  143,  388,  135,  388,  388,  388,   83,
       84,   83,   85,  388,  135,  388,  206,  388,  199,  388,
      270,  388,  388,  388,  271,  388,  141,  210,  388,  135,
      272,  388,  135,   83,   84,   83,   85,  388,   83,   84,
       83,   85,   83,   84,   83,   85,  388,  388,  273,  388,
      135,  271,  141,  274,  211,  388,  272,   83,   84,   83,
       85,   83,   84,   83,   85,   83,   84,   83,   85,  388,
      388,  275,  388,  388,  388,  273,  277,  388,  388,  388,
      274,  388,  276,  278,   83,   84,   83,   85,   83,   84,

       83,   85,  388,  388,  279,  388,  388,  275,   83,   84,
       83,   85,  388,  277,   83,   84,   83,   85,  276,  280,
      278,  388,  281,   83,   84,   83,   85,  282,  388,  388,
      279,   83,   84,   83,   85,  388,  283,   83,   84,   83,
       85,   83,   84,   83,   85,  280,  388,  388,  281,  388,
      388,  388,  284,  388,  282,   83,   84,   83,   85,   83,
       84,   83,   85,  283,   83,   84,   83,   85,   83,   84,
       83,   85,  388,  388,  285,   83,   84,   83,   85,  284,
       83,   84,   83,   85,  388,  388,  286,  388,  388,  388,
      287,   83,   84,   83,   85,   83,   84,   83,   85,  388,

      388,  285,   83,   84,   83,   85,  289,  388,  388,  288,
      388,  388,  286,  388,  388,  388,  287,   83,   84,   83,
       85,   83,   84,   83,   85,   83,   84,   83,   85,  388,
      388,  290,  388,  289,  388,  288,   83,   84,   83,   85,
      291,   83,   84,   83,   85,   83,   84,   83,   85,  388,
      292,  388,   83,   84,   83,   85,  293,  290,   83,   84,
       83,   85,  388,  388,  294,  295,  388,  291,  297,   84,
      298,  299,  200,  388,  388,  388,  292,  300,  135,  270,
      388,  201,  388,  293,   83,   84,   83,   85,  200,  388,
      388,  294,  295,  388,  135,  388,  388,  201,   83,   84,

       83,   85,  259,  294,  388,  296,  388,  388,  135,  201,
      202,  199,  135,  388,  388,  135,  388,  388,  205,   83,
       84,   83,   85,  388,  141,  201,  202,  206,  135,  388,
      301,  135,  205,  135,  388,  201,  388,  388,  141,  199,
      260,  206,  135,  388,  388,  135,  388,  388,  262,  135,
      388,  201,  388,  388,  141,  206,  207,  204,  135,  388,
      388,  135,  388,  135,  388,  199,  388,  388,  388,  206,
      207,  388,  135,  388,  388,  135,  388,  388,  388,  135,
      388,  206,  388,  199,  388,  204,  263,  388,  135,  388,
      388,  135,  388,  135,  388,  206,  388,  199,  388,   83,

       84,   83,   85,   83,   84,   83,   85,  388,  388,  135,
      306,  204,  388,  258,   83,   84,   83,   85,  307,   83,
       84,   83,   85,  388,  388,   83,   84,   83,   85,   83,
       84,   83,   85,   83,   84,   83,   85,  306,  388,  388,
      388,  308,  388,  309,  310,  307,   83,   84,   83,   85,
      388,  311,   83,   84,   83,   85,  388,  313,  388,  388,
      388,  312,   83,   84,   83,   85,  388,  308,  388,  309,
      388,  310,   83,   84,   83,   85,  388,  311,   83,   84,
       83,   85,  388,  388,  313,  388,  314,  312,  388,  388,
      388,  315,   83,   84,   83,   85,  388,  316,   83,   84,

       83,   85,  317,   83,   84,   83,   85,  318,   83,   84,
       83,   85,  314,  388,  388,  319,  388,  315,  388,  320,
      388,  388,  388,  316,   83,   84,   83,   85,  317,   83,
       84,   83,   85,  388,  318,   83,   84,   83,   85,  322,
      388,  388,  319,  388,  388,  388,  320,   83,   84,   83,
       85,  321,   83,   84,   83,   85,   83,   84,   83,   85,
       83,   84,   83,   85,  388,  388,  322,  388,  388,   83,
       84,   83,   85,   83,   84,   83,   85,  321,  324,  388,
      388,  323,  325,   83,   84,  327,   85,  388,  326,  388,
      388,  388,  328,  329,  388,   83,   84,   83,   85,   83,

       84,   83,   85,  388,  324,  388,  388,  323,  325,  325,
       83,   84,   83,   85,  388,  326,  153,  153,  153,  153,
      153,  153,  153,  154,  155,  154,  332,  388,  339,  153,
      153,  153,  153,  153,  388,  334,  388,  388,  388,  340,
       83,   84,   83,   85,   83,   84,   83,   85,   83,   84,
       83,   85,  388,  388,  339,  388,  388,  388,  153,  153,
      153,   83,   84,   83,   85,  340,   83,   84,   83,   85,
      388,  388,  388,  341,   83,   84,   83,   85,  388,  342,
      344,  388,  388,  388,  153,  153,  153,   83,   84,   83,
       85,  343,  388,  388,  388,   83,   84,   83,   85,  341,

      345,   83,   84,   83,   85,  342,  388,  344,  388,  346,
      347,   83,   84,   83,   85,  388,  388,  343,   83,   84,
       83,   85,   83,   84,   83,   85,  345,  388,  349,  388,
      348,   83,   84,   83,   85,  346,  388,  347,   83,   84,
       83,   85,   83,   84,   83,   85,  350,  388,  351,   83,
       84,   83,   85,  352,  388,  349,  348,   83,   84,   83,
       85,   83,   84,   83,   85,   83,   84,   83,   85,  353,
      388,  354,  355,  350,  351,   83,   84,   83,   85,  388,
      352,   83,   84,   83,   85,  388,  355,   83,   84,   83,
       85,   83,   84,   83,   85,  353,  361,  354,  388,  355,

       83,   84,   83,   85,   83,   84,   83,   85,  388,  388,
      388,  362,  388,  359,  388,   83,   84,   83,   85,   83,
       84,   83,   85,  361,   83,   84,   83,   85,  388,  388,
      388,  363,  364,  388,  365,  388,  388,  388,  362,  366,
       83,   84,   83,   85,  388,   83,   84,   83,   85,   83,
       84,   83,   85,   83,   84,   83,   85,  363,  388,  364,
      367,  365,   83,   84,   83,   85,  366,   83,   84,   83,
       85,   83,   84,   83,   85,   83,   84,   83,   85,   83,
       84,   83,   85,   83,   84,   83,   85,  367,  388,  368,
      369,   83,   84,   83,   85,   83,   84,   83,   85,  388,

      388,  370,  388,  388,  388,  370,   83,   84,   83,   85,
       83,   84,   83,   85,  388,  368,  388,  369,   83,   84,
       83,   85,  388,  388,  373,  388,  388,  370,  388,  388,
      388,  371,  388,  388,  374,   83,   84,   83,   85,   83,
       84,   83,   85,   83,   84,   83,   85,  388,  388,  388,
      373,   83,   84,   83,   85,   83,   84,   83,   85,  388,
      374,  375,   84,  376,  377,   83,   84,   83,   85,  388,
      378,  379,   83,   84,   83,   85,   83,   84,   83,   85,
      380,  388,  388,  388,  388,  388,  388,  388,  388,  388,
      388,  388,  388,  388,  388,  388,  388,  388,  388,  388,

      388,  388,  388,  388,  388,  388,  388,  380,   55,  388,
       55,   55,   55,   55,   58,  388,   58,   58,   58,   58,
       69,   69,   69,   69,   69,   86,   86,   86,  131,  131,
      131,  388,  388,  131,  135,  135,  135,  135,  135,  138,
      388,  138,  138,  138,  138,  141,  141,  141,  141,  141,
      141,  156,  156,  156,  388,  156,  156,  199,  199,  199,
      199,  199,  199,  204,  204,  204,  204,  204,  204,  208,
      208,  208,  208,  208,  208,  258,  258,  258,  258,  258,
      258,  261,  261,  261,  261,  261,  261,    3,  388,  388,
      388,  388,  388,  388,  388,  388,  388,  388,  388,  388,

      388,  388,  388,  388,  388,  388,  388,  388,  388,  388,
      388,  388,  388,  388,  388,  388,  388,  388,  388,  388,
      388,  388,  388,  388,  388,  388,  388,  388,  388,  388,
      388,  388,  388,  388,  388,  388,  388,  388,  388,  388,
      388,  388,  388,  388,  388,  388,  388,  388,  388,  388,
      388,  388,  388,  388,  388,  388,  388,  388,  388
    } ;

static yyconst flex_int16_t yy_chk[2560] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    8,   11,   19,   19,  379,   11,   11,   66,   66,
       13,   11,   13,   13,   60,   60,   60,   15,   13,   15,
       15,   15,   16,   18,   55,   16,   16,   18,   69,   18,

       18,   18,   21,   21,   21,   21,   77,   77,   16,   67,
        8,   13,   67,   67,   21,   21,   27,   27,   27,   27,
       23,   23,   23,   23,   24,   24,   24,   24,   57,   71,
      127,   21,  377,   55,   16,   23,   69,   13,  329,   24,
       70,   21,   21,   70,   70,   23,   25,   25,   25,   25,
       26,   26,   26,   26,  328,   73,  300,   21,   22,   22,
       22,   22,   23,   83,   83,  138,   24,   57,   71,  127,
       25,   23,   84,   84,  212,   26,   38,   38,   38,   38,
       22,  148,   70,   22,  147,   22,  123,  123,   28,   28,
       28,   28,   22,   73,  128,  128,   25,   29,   29,   29,

       29,   26,   81,   28,  138,   78,   22,   28,  140,   22,
       76,   22,   29,  129,  129,  129,   28,   68,   22,   68,
       68,   68,   29,  135,   30,   30,   30,   30,  203,  133,
       28,  133,  133,  133,   28,   30,   75,  134,   65,   29,
      134,  134,   28,   31,   31,   31,   31,  140,   29,  154,
      154,   62,   30,   32,   32,   32,   32,   53,   31,  155,
      155,  135,   30,   33,   33,   33,   33,  203,   31,   86,
       86,   86,   86,   31,   33,  196,  196,  151,   30,  151,
      151,  151,   33,  211,   32,   31,  197,  197,   33,   89,
       89,   89,   89,   41,   31,   35,   35,   35,   35,   31,

       20,   33,  214,  214,   34,   34,   34,   34,  198,   33,
       32,  198,  198,   35,   33,   34,   34,   36,   36,   36,
       36,  211,   14,   34,  215,   35,    7,  215,  215,   35,
      216,  216,   36,  217,    5,  217,   36,  217,  217,    3,
       35,    0,   34,   34,    0,   37,   37,   37,   37,  257,
       34,   35,  257,  257,  256,   35,  256,  256,  256,   36,
       37,  302,  302,   36,   42,   42,   42,   42,   43,   43,
       43,   43,    0,   37,    0,   44,   44,   44,   44,   42,
       45,   45,   45,   45,  265,  265,  265,   37,    0,   42,
       44,    0,   43,  266,   44,   45,  266,  266,    0,   37,

      267,  267,  267,   44,    0,   45,   42,    0,   46,   46,
       46,   46,  304,  304,    0,   42,    0,   44,   43,   46,
        0,   44,   45,   47,   47,   47,   47,    0,  268,   44,
      268,   45,  268,  268,   47,    0,   46,   48,   48,   48,
       48,  298,   47,  298,  298,    0,   46,    0,   47,   49,
       49,   49,   49,   74,    0,   48,   74,   50,   50,   50,
       50,   47,   46,    0,   49,    0,   72,   48,   49,   47,
        0,   48,   50,    0,   47,   72,    0,   87,   87,   87,
       87,    0,   48,    0,   74,   50,    0,   74,  305,  305,
       74,   49,    0,   48,    0,   49,  297,   48,    0,   50,

      297,  297,   87,   72,   72,    0,   72,    0,   74,   72,
       74,   50,    0,   88,   88,   88,   88,    0,   90,   90,
       90,   90,   91,   91,   91,   91,    0,   72,   87,   72,
        0,   72,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   88,   90,    0,   85,   85,   85,   85,   85,
       92,   92,   92,   92,    0,   91,   93,   93,   93,   93,
        0,   92,   94,   94,   94,   94,  327,  327,   88,   90,
        0,   93,  327,    0,   85,   85,   85,   97,   97,   97,
       97,   91,   95,   95,   95,   95,   94,    0,   92,  337,
      337,   97,   96,   96,   96,   96,  338,  338,   93,    0,

       85,   85,   85,   96,    0,   95,  303,    0,   96,  303,
      303,    0,   94,   98,   98,   98,   98,    0,   97,  360,
      360,   99,   99,   99,   99,  100,  100,  100,  100,    0,
       96,   95,   99,  336,    0,   96,  336,  336,   98,  100,
        0,  101,  101,  101,  101,  102,  102,  102,  102,  103,
      103,  103,  103,  104,  104,  104,  104,  372,  372,   99,
        0,  102,  378,  378,   98,    0,  100,  101,  105,  105,
      105,  105,  106,  106,  106,  106,    0,  103,    0,    0,
      104,  105,  107,  107,  107,  107,    0,    0,  102,  110,
      110,  110,  110,  101,    0,  108,  108,  108,  108,  109,

      109,  109,  109,  103,  106,    0,  104,    0,  105,  108,
        0,  107,    0,    0,  109,    0,  110,  111,  111,  111,
      111,  112,  112,  112,  112,  113,  113,  113,  113,    0,
      106,  114,  114,  114,  114,    0,  108,  107,    0,    0,
      112,  109,  110,  111,  115,  115,  115,  115,    0,  113,
        0,  116,  116,  116,  116,    0,  114,  118,  118,  118,
      118,  115,  117,  117,  117,  117,    0,  112,    0,  111,
      119,  119,  119,  119,  117,  113,  116,  335,  335,  335,
      118,    0,  114,  120,  120,  120,  120,    0,  115,  121,
      121,  121,  121,  122,  122,  122,  122,  124,  124,  124,

      124,  117,  116,  119,    0,    0,  118,  125,  125,  125,
      125,    0,  120,    0,    0,  137,  121,    0,  137,  122,
        0,    0,  124,  126,  126,  126,  126,  375,  136,  119,
        0,  375,  375,  125,  136,    0,    0,  136,  120,    0,
        0,    0,  121,    0,  141,  122,  137,    0,  124,  137,
      126,    0,  137,  141,  376,  142,  376,  376,    0,  125,
        0,  142,  376,    0,  142,  136,  136,    0,  136,    0,
      137,  136,  137,    0,  143,  152,  126,  152,  152,  152,
      152,  141,  141,  143,  141,    0,    0,  141,  144,  136,
        0,  136,  142,  142,  144,  142,    0,  144,  142,  156,

      156,  156,  156,    0,    0,  141,    0,  141,    0,  141,
        0,  143,  143,    0,  143,    0,  142,  143,  142,    0,
      142,  157,  157,  157,  157,  144,  144,    0,  144,    0,
        0,  144,    0,    0,    0,  143,    0,  143,    0,  143,
      158,  158,  158,  158,  159,  159,  159,  159,    0,  144,
        0,  144,    0,  144,  157,    0,    0,  159,    0,  158,
      160,  160,  160,  160,  161,  161,  161,  161,  162,  162,
      162,  162,  163,  163,  163,  163,    0,  161,    0,    0,
      157,    0,    0,    0,  159,    0,  158,  164,  164,  164,
      164,    0,  165,  165,  165,  165,  168,  168,  168,  168,

        0,  163,    0,    0,  161,  165,  166,  166,  166,  166,
      164,  167,  167,  167,  167,  169,  169,  169,  169,  166,
      166,  172,  172,  172,  172,  168,    0,  163,    0,  169,
        0,    0,  165,    0,  166,  167,  164,  170,  170,  170,
      170,    0,  171,  171,  171,  171,  166,  166,    0,    0,
      172,  168,  170,  171,    0,    0,  169,    0,    0,    0,
      166,  167,  173,  173,  173,  173,  174,  174,  174,  174,
      175,  175,  175,  175,    0,    0,  172,    0,    0,  170,
      171,  176,  176,  176,  176,    0,    0,  174,    0,    0,
        0,  173,    0,  177,  177,  177,  177,  178,  178,  178,

      178,  179,  179,  179,  179,    0,    0,  176,  177,  180,
      180,  180,  180,  174,  178,    0,    0,  173,    0,    0,
      180,  181,  181,  181,  181,    0,    0,    0,  179,  182,
      182,  182,  182,  176,    0,  177,  181,  184,  184,  184,
      184,  178,  183,  183,  183,  183,    0,  180,  185,  185,
      185,  185,    0,  182,  179,  186,  186,  186,  186,  183,
        0,    0,    0,  181,    0,    0,  185,    0,    0,    0,
      184,  187,  187,  187,  187,  189,  189,  189,  189,  182,
      188,  188,  188,  188,    0,    0,  183,  186,  190,  190,
      190,  190,  188,  185,    0,    0,  184,    0,    0,    0,

      187,    0,    0,    0,  189,  191,  191,  191,  191,    0,
      190,    0,    0,  186,  192,  192,  192,  192,  199,  188,
      194,  194,  194,  194,  199,  192,  187,  199,    0,    0,
      189,    0,    0,    0,  191,  194,  190,  193,  193,  193,
      193,  195,  195,  195,  195,  200,  218,  218,  218,  218,
      193,  200,  192,    0,  200,  199,  199,  201,  199,    0,
      191,  199,  194,  201,    0,    0,  201,  202,    0,    0,
      195,    0,    0,  202,    0,    0,  202,  193,    0,  199,
        0,  199,  200,  200,  204,  200,    0,    0,  200,    0,
      204,    0,    0,  204,  201,  201,  195,  201,    0,    0,

      201,    0,    0,  205,  202,  202,  200,  202,  200,  205,
      202,    0,  205,  231,  231,  231,  231,  206,  201,    0,
      201,  204,  204,  206,  204,    0,  206,  204,  202,    0,
      202,    0,    0,  207,  219,  219,  219,  219,    0,  207,
      205,  205,  207,  205,    0,  204,  205,  204,    0,  204,
      208,    0,    0,    0,  206,  206,    0,  206,    0,  208,
      206,    0,    0,  209,  205,  219,  205,    0,  205,  209,
      207,  207,  209,  207,    0,    0,  207,    0,  206,    0,
      206,    0,  206,  220,  220,  220,  220,  208,  208,    0,
      208,  219,    0,  208,  207,    0,  207,    0,  207,  210,

      209,  209,    0,  209,  220,  210,  209,    0,  210,    0,
        0,  208,    0,  208,    0,  208,    0,    0,    0,  221,
      221,  221,  221,    0,  209,    0,  209,    0,  209,    0,
      220,    0,    0,    0,  221,    0,  210,  210,    0,  210,
      221,    0,  210,  222,  222,  222,  222,    0,  223,  223,
      223,  223,  224,  224,  224,  224,    0,    0,  222,    0,
      210,  221,  210,  223,  210,    0,  221,  225,  225,  225,
      225,  226,  226,  226,  226,  227,  227,  227,  227,    0,
        0,  224,    0,    0,    0,  222,  226,    0,    0,    0,
      223,    0,  225,  227,  228,  228,  228,  228,  229,  229,

      229,  229,    0,    0,  227,    0,    0,  224,  230,  230,
      230,  230,    0,  226,  233,  233,  233,  233,  225,  228,
      227,    0,  229,  232,  232,  232,  232,  230,    0,    0,
      227,  234,  234,  234,  234,    0,  232,  235,  235,  235,
      235,  236,  236,  236,  236,  228,    0,    0,  229,    0,
        0,    0,  236,    0,  230,  237,  237,  237,  237,  238,
      238,  238,  238,  232,  239,  239,  239,  239,  240,  240,
      240,  240,    0,    0,  238,  241,  241,  241,  241,  236,
      242,  242,  242,  242,    0,    0,  239,    0,    0,    0,
      240,  243,  243,  243,  243,  244,  244,  244,  244,    0,

        0,  238,  245,  245,  245,  245,  243,    0,    0,  242,
        0,    0,  239,    0,    0,    0,  240,  246,  246,  246,
      246,  247,  247,  247,  247,  248,  248,  248,  248,    0,
        0,  245,    0,  243,    0,  242,  249,  249,  249,  249,
      247,  250,  250,  250,  250,  251,  251,  251,  251,    0,
      248,    0,  252,  252,  252,  252,  250,  245,  253,  253,
      253,  253,    0,    0,  251,  252,    0,  247,  254,  254,
      254,  254,  258,    0,    0,    0,  248,  254,  258,  253,
        0,  258,    0,  250,  255,  255,  255,  255,  259,    0,
        0,  251,  252,    0,  259,    0,    0,  259,  270,  270,

      270,  270,  260,  255,    0,  253,    0,    0,  260,  258,
      258,  260,  258,    0,    0,  258,    0,    0,  261,  271,
      271,  271,  271,    0,  261,  259,  259,  261,  259,    0,
      255,  259,  262,  258,    0,  258,    0,    0,  262,  260,
      260,  262,  260,    0,    0,  260,    0,    0,  263,  259,
        0,  259,    0,    0,  263,  261,  261,  263,  261,    0,
        0,  261,    0,  260,    0,  260,    0,    0,    0,  262,
      262,    0,  262,    0,    0,  262,    0,    0,    0,  261,
        0,  261,    0,  261,    0,  263,  263,    0,  263,    0,
        0,  263,    0,  262,    0,  262,    0,  262,    0,  269,

      269,  269,  269,  272,  272,  272,  272,    0,    0,  263,
      269,  263,    0,  263,  273,  273,  273,  273,  272,  274,
      274,  274,  274,    0,    0,  275,  275,  275,  275,  276,
      276,  276,  276,  277,  277,  277,  277,  269,    0,    0,
        0,  273,    0,  274,  275,  272,  278,  278,  278,  278,
        0,  276,  279,  279,  279,  279,    0,  278,    0,    0,
        0,  277,  280,  280,  280,  280,    0,  273,    0,  274,
        0,  275,  281,  281,  281,  281,    0,  276,  282,  282,
      282,  282,    0,    0,  278,    0,  279,  277,    0,    0,
        0,  280,  283,  283,  283,  283,    0,  281,  284,  284,

      284,  284,  282,  285,  285,  285,  285,  283,  286,  286,
      286,  286,  279,    0,    0,  284,    0,  280,    0,  286,
        0,    0,    0,  281,  288,  288,  288,  288,  282,  287,
      287,  287,  287,    0,  283,  289,  289,  289,  289,  288,
        0,    0,  284,    0,    0,    0,  286,  290,  290,  290,
      290,  287,  291,  291,  291,  291,  292,  292,  292,  292,
      293,  293,  293,  293,    0,    0,  288,    0,    0,  294,
      294,  294,  294,  295,  295,  295,  295,  287,  292,    0,
        0,  291,  294,  296,  296,  296,  296,    0,  295,    0,
        0,    0,  296,  296,    0,  301,  301,  301,  301,  306,

      306,  306,  306,    0,  292,    0,    0,  291,  301,  294,
      307,  307,  307,  307,    0,  295,  299,  299,  299,  299,
      299,  299,  299,  299,  299,  299,  299,    0,  306,  299,
      299,  299,  299,  299,    0,  301,    0,    0,    0,  307,
      308,  308,  308,  308,  309,  309,  309,  309,  310,  310,
      310,  310,    0,    0,  306,    0,    0,    0,  299,  299,
      299,  312,  312,  312,  312,  307,  311,  311,  311,  311,
        0,    0,    0,  309,  313,  313,  313,  313,    0,  310,
      312,    0,    0,    0,  299,  299,  299,  314,  314,  314,
      314,  311,    0,    0,    0,  315,  315,  315,  315,  309,

      313,  316,  316,  316,  316,  310,    0,  312,    0,  314,
      315,  317,  317,  317,  317,    0,    0,  311,  318,  318,
      318,  318,  320,  320,  320,  320,  313,    0,  317,    0,
      316,  319,  319,  319,  319,  314,    0,  315,  321,  321,
      321,  321,  322,  322,  322,  322,  319,    0,  320,  323,
      323,  323,  323,  321,    0,  317,  316,  324,  324,  324,
      324,  325,  325,  325,  325,  326,  326,  326,  326,  322,
        0,  323,  325,  319,  320,  334,  334,  334,  334,    0,
      321,  339,  339,  339,  339,    0,  334,  340,  340,  340,
      340,  341,  341,  341,  341,  322,  339,  323,    0,  325,

      342,  342,  342,  342,  343,  343,  343,  343,    0,    0,
        0,  342,    0,  334,    0,  344,  344,  344,  344,  345,
      345,  345,  345,  339,  346,  346,  346,  346,    0,    0,
        0,  343,  344,    0,  345,    0,    0,    0,  342,  346,
      347,  347,  347,  347,    0,  348,  348,  348,  348,  349,
      349,  349,  349,  350,  350,  350,  350,  343,    0,  344,
      348,  345,  351,  351,  351,  351,  346,  352,  352,  352,
      352,  353,  353,  353,  353,  354,  354,  354,  354,  355,
      355,  355,  355,  359,  359,  359,  359,  348,    0,  352,
      354,  361,  361,  361,  361,  362,  362,  362,  362,    0,

        0,  355,    0,    0,    0,  359,  363,  363,  363,  363,
      364,  364,  364,  364,    0,  352,    0,  354,  365,  365,
      365,  365,    0,    0,  362,    0,    0,  355,    0,    0,
        0,  359,    0,    0,  364,  366,  366,  366,  366,  367,
      367,  367,  367,  368,  368,  368,  368,    0,    0,    0,
      362,  369,  369,  369,  369,  370,  370,  370,  370,    0,
      364,  371,  371,  371,  371,  373,  373,  373,  373,    0,
      371,  371,  374,  374,  374,  374,  380,  380,  380,  380,
      373,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,  373,  389,    0,
      389,  389,  389,  389,  390,    0,  390,  390,  390,  390,
      391,  391,  391,  391,  391,  392,  392,  392,  393,  393,
      393,    0,    0,  393,  394,  394,  394,  394,  394,  395,
        0,  395,  395,  395,  395,  396,  396,  396,  396,  396,
      396,  397,  397,  397,    0,  397,  397,  398,  398,  398,
      398,  398,  398,  399,  399,  399,  399,  399,  399,  400,
      400,  400,  400,  400,  400,  401,  401,  401,  401,  401,
      401,  402,  402,  402,  402,  402,  402,  388,  388,  388,
      388,  388,  388,  388,  388,  388,  388,  388,  388,  388,

      388,  388,  388,  388,  388,  388,  388,  388,  388,  388,
      388,  388,  388,  388,  388,  388,  388,  388,  388,  388,
      388,  388,  388,  388,  388,  388,  388,  388,  388,  388,
      388,  388,  388,  388,  388,  388,  388,  388,  388,  388,
      388,  388,  388,  388,  388,  388,  388,  388,  388,  388,
      388,  388,  388,  388,  388,  388,  388,  388,  388
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "language2.ll"
#line 5 "language2.ll"
/*
    This file is part of Msc-generator.
    Copyright 2008,2009,2010,2011,2012,2013,2014 Zoltan Turanyi
    Distributed under GNU Affero General Public License.

    Msc-generator is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    Msc-generator is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with Msc-generator.  If not, see <http://www.gnu.org/licenses/>.
*/

#ifdef COLOR_SYNTAX_HIGHLIGHT
#define C_S_H (1)
#define C_S_H_IS_COMPILED
#else
#define C_S_H (0)
#endif

#include <stdio.h>
#include <string.h>
#include <iostream>

#ifdef C_S_H_IS_COMPILED
#include "csh.h"
#define YYMSC_RESULT_TYPE Csh
#define RESULT csh

//If we scan for color syntax highlight use this location
//yyerror is defined by bison, the other is defined for flex
#define YYLTYPE_IS_DECLARED
#define YYLTYPE CshPos
#define CHAR_IF_CSH(A) char

#include "commands.h" //MSC_* defs and CommandNote and Shapes in entity.h
#include "colorsyntax.h"
#include "language_misc.h"
#else
#include "msc.h"
#define YYMSC_RESULT_TYPE Msc
#define RESULT msc

#define CHAR_IF_CSH(A) A
#include "language.h"
#include "language_misc.h"
#endif

#ifdef C_S_H_IS_COMPILED

#define YY_INPUT(buffer, res, max_size)             \
do {                                                \
    parse_parm *pp = csh_get_extra(yyscanner);        \
    if (pp->pos >= pp->length)                      \
        res = YY_NULL;                              \
    else                                            \
    {                                               \
        res = pp->length - pp->pos;                 \
        res > (int)max_size ? res = max_size : 0;   \
        memcpy(buffer, pp->buf + pp->pos, res);     \
        pp->pos += res;                             \
    }                                               \
} while (0)

#define YY_USER_ACTION do {                     \
    yylloc->first_pos = yylloc->last_pos+1;     \
    yylloc->last_pos = yylloc->last_pos+yyleng; \
    } while(0);

#define YYRHSLOC(Rhs, K) ((Rhs)[K])

#define YYLLOC_DEFAULT(Current, Rhs, N)                  \
    do                                                   \
      if (YYID (N))                                      \
    {                                                    \
      (Current).first_pos = YYRHSLOC (Rhs, 1).first_pos; \
      (Current).last_pos  = YYRHSLOC (Rhs, N).last_pos;  \
    }                                                    \
      else                                               \
    {                                                    \
        (Current).first_pos = (Current).last_pos   =     \
        YYRHSLOC (Rhs, 0).last_pos;                      \
    }                                                    \
    while (YYID (0))

#else

//Read in 512-byte chunks
//We use this low value to make progress reporint more frequent
#define YY_READ_BUF_SIZE 512

#define YY_INPUT(buffer, res, max_size)             \
do {                                                \
    parse_parm *pp = csh_get_extra(yyscanner);        \
    if (pp->pos >= pp->length)                      \
        res = YY_NULL;                              \
    else                                            \
    {                                               \
        res = pp->length - pp->pos;                 \
        res > (int)max_size ? res = max_size : 0;   \
        memcpy(buffer, pp->buf + pp->pos, res);     \
        pp->msc->Progress.DoneItem(MscProgress::PARSE, res); \
        pp->pos += res;                             \
    }                                               \
} while (0)

#define YY_USER_ACTION do {                              \
    yylloc->first_line = yylloc->last_line;              \
    yylloc->first_column = yylloc->last_column+1;        \
    yylloc->last_column = yylloc->first_column+yyleng-1; \
    } while(0);

#include "parse_tools.h"

#endif /* C_S_H_IS_COMPILED */

#line 1260 "<stdout>"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int csh_lex_init (yyscan_t* scanner);

int csh_lex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int csh_lex_destroy (yyscan_t yyscanner );

int csh_get_debug (yyscan_t yyscanner );

void csh_set_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE csh_get_extra (yyscan_t yyscanner );

void csh_set_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *csh_get_in (yyscan_t yyscanner );

void csh_set_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *csh_get_out (yyscan_t yyscanner );

void csh_set_out  (FILE * out_str ,yyscan_t yyscanner );

int csh_get_leng (yyscan_t yyscanner );

char *csh_get_text (yyscan_t yyscanner );

int csh_get_lineno (yyscan_t yyscanner );

void csh_set_lineno (int line_number ,yyscan_t yyscanner );

YYSTYPE * csh_get_lval (yyscan_t yyscanner );

void csh_set_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

       YYLTYPE *csh_get_lloc (yyscan_t yyscanner );
    
        void csh_set_lloc (YYLTYPE * yylloc_param ,yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int csh_wrap (yyscan_t yyscanner );
#else
extern int csh_wrap (yyscan_t yyscanner );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int csh_lex \
               (YYSTYPE * yylval_param,YYLTYPE * yylloc_param ,yyscan_t yyscanner);

#define YY_DECL int csh_lex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 129 "language2.ll"


 /* Newline characters in all forms accepted */
#line 1508 "<stdout>"

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			csh_ensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				csh__create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		csh__load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 389 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 2488 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 132 "language2.ll"

  #ifndef C_S_H_IS_COMPILED
    msc_jump_line(yylloc);
  #endif

	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 138 "language2.ll"

  #ifndef C_S_H_IS_COMPILED
    msc_jump_line(yylloc);
  #endif

	YY_BREAK
case 3:
YY_RULE_SETUP
#line 144 "language2.ll"

  #ifndef C_S_H_IS_COMPILED
    msc_jump_line(yylloc);
  #endif

	YY_BREAK
/* # starts a comment last until end of line */
case 4:
YY_RULE_SETUP
#line 151 "language2.ll"

  #ifdef C_S_H_IS_COMPILED
    csh_get_extra(yyscanner)->csh->AddCSH(*yylloc, COLOR_COMMENT);
  #endif

	YY_BREAK
case 5:
YY_RULE_SETUP
#line 157 "language2.ll"
/* ignore whitespace */;
	YY_BREAK
/* These shape definition keywords are case sensitive */
case 6:
YY_RULE_SETUP
#line 160 "language2.ll"
yylval_param->shapecommand = ShapeElement::MOVE_TO; return TOK_SHAPE_COMMAND;
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 161 "language2.ll"
yylval_param->shapecommand = ShapeElement::LINE_TO; return TOK_SHAPE_COMMAND;
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 162 "language2.ll"
yylval_param->shapecommand = ShapeElement::CURVE_TO; return TOK_SHAPE_COMMAND;
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 163 "language2.ll"
yylval_param->shapecommand = ShapeElement::CLOSE_PATH; return TOK_SHAPE_COMMAND;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 164 "language2.ll"
yylval_param->shapecommand = ShapeElement::SECTION_BG; return TOK_SHAPE_COMMAND;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 165 "language2.ll"
yylval_param->shapecommand = ShapeElement::TEXT_AREA; return TOK_SHAPE_COMMAND;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 166 "language2.ll"
yylval_param->shapecommand = ShapeElement::HINT_AREA; return TOK_SHAPE_COMMAND;
	YY_BREAK
/* These keywords are case insensitive */
case 13:
YY_RULE_SETUP
#line 169 "language2.ll"
yylval_param->str = strdup(yytext); return TOK_MSC;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 170 "language2.ll"
yylval_param->str = strdup(yytext); return TOK_COMMAND_HEADING;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 171 "language2.ll"
yylval_param->str = strdup(yytext); return TOK_COMMAND_NUDGE;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 172 "language2.ll"
yylval_param->str = strdup(yytext); return TOK_COMMAND_DEFSHAPE;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 173 "language2.ll"
yylval_param->str = strdup(yytext); return TOK_COMMAND_DEFCOLOR;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 174 "language2.ll"
yylval_param->str = strdup(yytext); return TOK_COMMAND_DEFSTYLE;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 175 "language2.ll"
yylval_param->str = strdup(yytext); return TOK_COMMAND_DEFDESIGN;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 176 "language2.ll"
yylval_param->str = strdup(yytext); return TOK_COMMAND_NEWPAGE;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 177 "language2.ll"
yylval_param->str = strdup(yytext); return TOK_COMMAND_BIG;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 178 "language2.ll"
yylval_param->str = strdup(yytext); return TOK_COMMAND_BOX;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 179 "language2.ll"
yylval_param->str = strdup(yytext); return TOK_COMMAND_PIPE;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 180 "language2.ll"
yylval_param->str = strdup(yytext); return TOK_COMMAND_MARK;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 181 "language2.ll"
yylval_param->str = strdup(yytext); return TOK_COMMAND_PARALLEL;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 182 "language2.ll"
yylval_param->str = strdup(yytext); return TOK_COMMAND_OVERLAP;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 183 "language2.ll"
yylval_param->str = strdup(yytext); return TOK_VERTICAL;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 184 "language2.ll"
yylval_param->str = strdup(yytext); return TOK_AT;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 185 "language2.ll"
yylval_param->str = strdup(yytext); return TOK_LOST;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 186 "language2.ll"
yylval_param->str = strdup(yytext); return TOK_AT_POS;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 187 "language2.ll"
yylval_param->str = strdup(yytext); return TOK_AT_POS;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 188 "language2.ll"
yylval_param->str = strdup(yytext); return TOK_AT_POS;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 189 "language2.ll"
yylval_param->str = strdup(yytext); return TOK_SHOW;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 190 "language2.ll"
yylval_param->str = strdup(yytext); return TOK_HIDE;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 191 "language2.ll"
yylval_param->str = strdup(yytext); return TOK_ACTIVATE;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 192 "language2.ll"
yylval_param->str= strdup(yytext); return TOK_DEACTIVATE;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 193 "language2.ll"
yylval_param->str = strdup(yytext); return TOK_BYE;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 194 "language2.ll"
yylval_param->str = strdup(yytext); return TOK_COMMAND_VSPACE;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 195 "language2.ll"
yylval_param->str = strdup(yytext); return TOK_COMMAND_HSPACE;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 196 "language2.ll"
yylval_param->str = strdup(yytext); return TOK_COMMAND_SYMBOL;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 197 "language2.ll"
yylval_param->str = strdup(yytext); return TOK_COMMAND_NOTE;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 198 "language2.ll"
yylval_param->str = strdup(yytext); return TOK_COMMAND_COMMENT;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 199 "language2.ll"
yylval_param->str = strdup(yytext); return TOK_COMMAND_ENDNOTE;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 200 "language2.ll"
yylval_param->str = strdup(yytext); return TOK_COMMAND_FOOTNOTE;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 201 "language2.ll"
yylval_param->str = strdup(yytext); return TOK_COMMAND_TITLE;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 202 "language2.ll"
yylval_param->str = strdup(yytext); return TOK_COMMAND_SUBTITLE;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 203 "language2.ll"
yylval_param->str = strdup(yytext); return TOK_COMMAND_TEXT;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 204 "language2.ll"
yylval_param->str = strdup(yytext); return TOK_VERTICAL_SHAPE;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 205 "language2.ll"
yylval_param->str = strdup(yytext); return TOK_VERTICAL_SHAPE;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 206 "language2.ll"
yylval_param->str = strdup(yytext); return TOK_VERTICAL_SHAPE;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 207 "language2.ll"
yylval_param->str = strdup(yytext); return TOK_VERTICAL_SHAPE;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 208 "language2.ll"
yylval_param->str = strdup(yytext); return TOK_MSCGEN_RBOX;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 209 "language2.ll"
yylval_param->str = strdup(yytext); return TOK_MSCGEN_ABOX;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 211 "language2.ll"
yylval_param->arcsymbol = EArcSymbol::DIV_DISCO;       return TOK_SPECIAL_ARC;// ...
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 212 "language2.ll"
yylval_param->arcsymbol = EArcSymbol::DIV_DIVIDER;     return TOK_SPECIAL_ARC;// ---
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 213 "language2.ll"
yylval_param->arcsymbol = EArcSymbol::ARC_SOLID;       return TOK_REL_TO;     // ->
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 214 "language2.ll"
yylval_param->arcsymbol = EArcSymbol::ARC_SOLID;       return TOK_REL_FROM;   // <-
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 215 "language2.ll"
yylval_param->arcsymbol = EArcSymbol::ARC_SOLID_BIDIR; return TOK_REL_BIDIR;  // <->
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 216 "language2.ll"
yylval_param->arcsymbol = EArcSymbol::ARC_DOUBLE;      return TOK_REL_TO;     // =>
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 217 "language2.ll"
yylval_param->arcsymbol = EArcSymbol::ARC_DOUBLE;      return TOK_REL_FROM;   // <= 
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 218 "language2.ll"
yylval_param->arcsymbol = EArcSymbol::ARC_DOUBLE_BIDIR;return TOK_REL_BIDIR;  // <=>
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 219 "language2.ll"
yylval_param->arcsymbol = EArcSymbol::ARC_DASHED;      return TOK_REL_TO;     // >>
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 220 "language2.ll"
yylval_param->arcsymbol = EArcSymbol::ARC_DASHED;      return TOK_REL_FROM;   // <<
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 221 "language2.ll"
yylval_param->arcsymbol = EArcSymbol::ARC_DASHED_BIDIR;return TOK_REL_BIDIR;  // <<>>
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 222 "language2.ll"
yylval_param->arcsymbol = EArcSymbol::ARC_DOTTED;      return TOK_REL_TO;     // >
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 223 "language2.ll"
yylval_param->arcsymbol = EArcSymbol::ARC_DOTTED;      return TOK_REL_FROM;   // <
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 224 "language2.ll"
yylval_param->arcsymbol = EArcSymbol::ARC_DOTTED_BIDIR;return TOK_REL_BIDIR;  // <>
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 225 "language2.ll"
yylval_param->arcsymbol = EArcSymbol::ARC_DBLDBL;      return TOK_REL_TO;     // =>>
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 226 "language2.ll"
yylval_param->arcsymbol = EArcSymbol::ARC_DBLDBL;      return TOK_REL_FROM;   // <<=
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 227 "language2.ll"
yylval_param->arcsymbol = EArcSymbol::ARC_DBLDBL_BIDIR;return TOK_REL_BIDIR; // <<=>>
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 228 "language2.ll"
yylval_param->arcsymbol = EArcSymbol::ARC_COLON;       return TOK_REL_TO;     // :>
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 229 "language2.ll"
yylval_param->arcsymbol = EArcSymbol::ARC_COLON;       return TOK_REL_FROM;   // <:
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 230 "language2.ll"
yylval_param->arcsymbol = EArcSymbol::ARC_COLON_BIDIR; return TOK_REL_BIDIR;  // <:>
	YY_BREAK
case 74:
/* rule 74 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 231 "language2.ll"
yylval_param->arcsymbol = EArcSymbol::ARC_X; return TOK_REL_TO;     // -X not followed by alphanum
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 232 "language2.ll"
yylval_param->arcsymbol = EArcSymbol::ARC_X;           return TOK_REL_FROM;   // X-
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 234 "language2.ll"
yylval_param->arcsymbol = EArcSymbol::BOX_SOLID;       return TOK_EMPH;       // --
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 235 "language2.ll"
yylval_param->arcsymbol = EArcSymbol::BOX_DASHED;      return TOK_EMPH_PLUS_PLUS;// ++
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 236 "language2.ll"
yylval_param->arcsymbol = EArcSymbol::BOX_DOTTED;      return TOK_EMPH;       // ..
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 237 "language2.ll"
yylval_param->arcsymbol = EArcSymbol::BOX_DOUBLE;      return TOK_EMPH;       // == 
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 238 "language2.ll"
return TOK_PLUS_EQUAL;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 239 "language2.ll"
return TOK_DASH;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 240 "language2.ll"
return TOK_PLUS;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 241 "language2.ll"
return TOK_EQUAL;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 242 "language2.ll"
return TOK_COMMA;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 243 "language2.ll"
return TOK_SEMICOLON;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 244 "language2.ll"
return TOK_OCBRACKET;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 245 "language2.ll"
return TOK_CCBRACKET;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 246 "language2.ll"
return TOK_OSBRACKET;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 247 "language2.ll"
return TOK_CSBRACKET;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 248 "language2.ll"
return TOK_ASTERISK;
	YY_BREAK
/* We need to list only those style names, which are not conforming to
  * TOK_STRING above. */
case 91:
YY_RULE_SETUP
#line 252 "language2.ll"
yylval_param->str=strdup(yytext); return TOK_STYLE_NAME;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 253 "language2.ll"
yylval_param->str=strdup(yytext); return TOK_STYLE_NAME;
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 254 "language2.ll"
yylval_param->str=strdup(yytext); return TOK_STYLE_NAME;
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 255 "language2.ll"
yylval_param->str=strdup(yytext); return TOK_STYLE_NAME;
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 256 "language2.ll"
yylval_param->str=strdup(yytext); return TOK_STYLE_NAME;
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 257 "language2.ll"
yylval_param->str=strdup(yytext); return TOK_STYLE_NAME;
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 258 "language2.ll"
yylval_param->str=strdup(yytext); return TOK_STYLE_NAME;
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 259 "language2.ll"
yylval_param->str=strdup(yytext); return TOK_STYLE_NAME;
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 260 "language2.ll"
yylval_param->str=strdup(yytext); return TOK_STYLE_NAME;
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 261 "language2.ll"
yylval_param->str=strdup(yytext); return TOK_STYLE_NAME;
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 262 "language2.ll"
yylval_param->str=strdup(yytext); return TOK_STYLE_NAME;
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 263 "language2.ll"
yylval_param->str=strdup(yytext); return TOK_STYLE_NAME;
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 264 "language2.ll"
yylval_param->str=strdup(yytext); return TOK_STYLE_NAME;
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 265 "language2.ll"
yylval_param->str=strdup(yytext); return TOK_STYLE_NAME;
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 266 "language2.ll"
yylval_param->str=strdup(yytext); return TOK_STYLE_NAME;
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 267 "language2.ll"
yylval_param->str=strdup(yytext); return TOK_STYLE_NAME;
	YY_BREAK
/* This is a colon-quoted string, finished by a quotation mark
 ** : "<string>"
 ** <string> can contain escaped quotation marks, hashmarks, but no line breaks
 */
case 107:
YY_RULE_SETUP
#line 274 "language2.ll"

  #ifdef C_S_H_IS_COMPILED
    yylval_param->str = strdup(yytext);
  #else
    {
    /* after whitespaces we are guaranteed to have a tailing and heading quot */
    char *s = msc_remove_head_tail_whitespace(yytext+1);
    /* s now points to the heading quotation marks.
    ** Now get rid of both quotation marks */
    std::string str(s+1);
    str.erase(str.length()-1);
    /* Calculate the position of the string and prepend a location escape */
    FileLineCol pos(csh_get_extra(yyscanner)->msc->current_file,
                 yylloc->first_line, yylloc->first_column + unsigned(s+1 - yytext));
    yylval_param->str = strdup((pos.Print() + str).c_str());
    }
  #endif
    return TOK_COLON_QUOTED_STRING;

	YY_BREAK
/* This is a colon-quoted string, finished by a newline (trailing context)
 ** : "<string>$
 ** <string> can contain escaped quotation marks, hashmarks, but no line breaks
 */
case 108:
YY_RULE_SETUP
#line 298 "language2.ll"

  #ifdef C_S_H_IS_COMPILED
    yylval_param->str = strdup(yytext);
    csh_get_extra(yyscanner)->csh->AddCSH_ErrorAfter(*yylloc, "Missing closing quotation mark.");
  #else
    {
    /* after whitespaces we are guaranteed to have a heading quot */
    const char *s = msc_remove_head_tail_whitespace(yytext+1);
    // s now points to heading quotation mark
    FileLineCol pos(csh_get_extra(yyscanner)->msc->current_file,
                 yylloc->first_line, yylloc->first_column + unsigned(s - yytext));
    csh_get_extra(yyscanner)->msc->Error.Error(pos,
         "This opening quotation mark misses its closing pair. "
         "Assuming string termination at line-end.",
         "Quoted strings cannot have line breaks. Use \'\\n\' to insert a line break.");
    /* Advance pos beyond the leading quotation mark */
    pos.col++;
    yylval_param->str = strdup((pos.Print() + (s+1)).c_str());
    }
  #endif
    return TOK_COLON_QUOTED_STRING;

	YY_BREAK
/* This is a non quoted colon-string
 ** : <string>
 ** terminated by any of: [ { or ;
 ** Honors escaping of the above via a backslash
 ** Can contain quotation marks (escaped or unescaped), but can not start with it
 ** If it contains a hashmark, unescaped [ { or ; is allowed till the end of the line
 ** (representing a commented section inside a label)
 *  \:[\t]*(((#[^\x0d\x0a]*)|[^\"\;\[\{\\]|(\\.))((#[^\x0d\x0a]*)|[^\;\[\{\\]|(\\.))*(\\)?|\\)  
 * \:[ \t]*((#[^\0xd\0xa]*|[^\"\;\{\[\\#\ \t]|(\\[^0xd0xa])))((#[^0xd0xa]*|[^\;\{\[\\#]|(\\[^0xd0xa])))*
 */
case 109:
/* rule 109 can match eol */
YY_RULE_SETUP
#line 331 "language2.ll"

  #ifdef C_S_H_IS_COMPILED
    yylval_param->str = strdup(yytext);
  #else
    yylval_param->str = msc_process_colon_string(yytext, yylloc,
                        csh_get_extra(yyscanner)->msc->current_file);
  #endif
    return TOK_COLON_STRING;

	YY_BREAK
/* This is a degenerate non quoted colon-string
 ** a colon followed by a solo escape or just a colon
 */
case 110:
YY_RULE_SETUP
#line 344 "language2.ll"

  #ifdef C_S_H_IS_COMPILED
    yylval_param->str = strdup(yytext);
   #else
    yylval_param->str = msc_process_colon_string(yytext, yylloc,
                        csh_get_extra(yyscanner)->msc->current_file);
  #endif
    return TOK_COLON_STRING;

	YY_BREAK
/* A simple quoted string, that can have escaped quotation marks inside.*/
case 111:
YY_RULE_SETUP
#line 356 "language2.ll"

    yylval_param->str = strdup(yytext+1);
    yylval_param->str[strlen(yylval_param->str) - 1] = '\0';
    return TOK_QSTRING;

	YY_BREAK
/* A simple quoted string, missing a closing quotation mark */
case 112:
YY_RULE_SETUP
#line 363 "language2.ll"

  #ifdef C_S_H_IS_COMPILED
    yylval_param->str = strdup(yytext+1);
    csh_get_extra(yyscanner)->csh->AddCSH_ErrorAfter(*yylloc, "Missing closing quotation mark.");
#else
    {
    yylval_param->str = strdup(yytext+1);
    FileLineCol pos(csh_get_extra(yyscanner)->msc->current_file,
                 yylloc->first_line, yylloc->first_column);
    csh_get_extra(yyscanner)->msc->Error.Error(pos,
         "This opening quotation mark misses its closing pair. "
         "Assuming string termination at line-end.",
         "Quoted strings cannot have line breaks. Use \'\\n\' to insert a line break.");
    }
  #endif
    return TOK_QSTRING;

	YY_BREAK
/* Numbers */
case 113:
YY_RULE_SETUP
#line 382 "language2.ll"

    yylval_param->str = strdup(yytext);
    return TOK_NUMBER;

	YY_BREAK
/* Strings not ending with a dot */
case 114:
YY_RULE_SETUP
#line 388 "language2.ll"

    yylval_param->str = strdup(yytext);
    return TOK_STRING;

	YY_BREAK
/* Strings ending with a dot, not followed by a second dot 
  * Two dots one after another shall be parsed a '..' into TOK_EMPH*/
case 115:
/* rule 115 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 395 "language2.ll"

    yylval_param->str = strdup(yytext);
    return TOK_STRING;

	YY_BREAK
/* Color definitions */
/* string+-number[,number]*/
case 116:
YY_RULE_SETUP
#line 402 "language2.ll"

    yylval_param->str = strdup(yytext);
    return TOK_COLORDEF;

	YY_BREAK
/* string,number[+-number]*/
case 117:
YY_RULE_SETUP
#line 408 "language2.ll"

    yylval_param->str = strdup(yytext);
    return TOK_COLORDEF;

	YY_BREAK
/* number,number,number[,number] */
case 118:
YY_RULE_SETUP
#line 414 "language2.ll"

    yylval_param->str = strdup(yytext);
    return TOK_COLORDEF;

	YY_BREAK
case YY_STATE_EOF(INITIAL):
#line 419 "language2.ll"
return TOK_EOF;
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 422 "language2.ll"
ECHO;
	YY_BREAK
#line 2350 "<stdout>"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * csh_lex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( csh_wrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of csh_lex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					csh_realloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			csh_restart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) csh_realloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 71);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 389 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 71;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 389 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 388);

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					csh_restart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( csh_wrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void csh_restart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        csh_ensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            csh__create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	csh__init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	csh__load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void csh__switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		csh_pop_buffer_state();
	 *		csh_push_buffer_state(new_buffer);
     */
	csh_ensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	csh__load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (csh_wrap()) processing, but the only time this flag
	 * is looked at is after csh_wrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void csh__load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE csh__create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) csh_alloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in csh__create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) csh_alloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in csh__create_buffer()" );

	b->yy_is_our_buffer = 1;

	csh__init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with csh__create_buffer()
 * @param yyscanner The scanner object.
 */
    void csh__delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		csh_free((void *) b->yy_ch_buf ,yyscanner );

	csh_free((void *) b ,yyscanner );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a csh_restart() or at EOF.
 */
    static void csh__init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	csh__flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then csh__init_buffer was _probably_
     * called from csh_restart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void csh__flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		csh__load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void csh_push_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	csh_ensure_buffer_stack(yyscanner);

	/* This block is copied from csh__switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from csh__switch_to_buffer. */
	csh__load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void csh_pop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	csh__delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		csh__load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void csh_ensure_buffer_stack (yyscan_t yyscanner)
{
	int num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)csh_alloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in csh_ensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)csh_realloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in csh_ensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE csh__scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) csh_alloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in csh__scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	csh__switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to csh_lex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       csh__scan_bytes() instead.
 */
YY_BUFFER_STATE csh__scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return csh__scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to csh_lex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE csh__scan_bytes  (yyconst char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) csh_alloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in csh__scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = csh__scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in csh__scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE csh_get_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int csh_get_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int csh_get_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *csh_get_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *csh_get_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int csh_get_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *csh_get_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void csh_set_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void csh_set_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "csh_set_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void csh_set_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "csh_set_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see csh__switch_to_buffer
 */
void csh_set_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void csh_set_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int csh_get_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void csh_set_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * csh_get_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void csh_set_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *csh_get_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void csh_set_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* csh_lex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int csh_lex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) csh_alloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* csh_lex_init_extra has the same functionality as csh_lex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to csh_alloc in
 * the yyextra field.
 */

int csh_lex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    csh_set_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) csh_alloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    csh_set_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from csh_lex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * csh_lex_init()
     */
    return 0;
}

/* csh_lex_destroy is for both reentrant and non-reentrant scanners. */
int csh_lex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		csh__delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		csh_pop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	csh_free(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        csh_free(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * csh_lex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    csh_free ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *csh_alloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *csh_realloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void csh_free (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see csh_realloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 422 "language2.ll"



/* END OF FILE */

