
#line 3 "<stdout>"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart (FILE *input_file ,yyscan_t yyscanner );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void yy_delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void yy_flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void yypop_buffer_state (yyscan_t yyscanner );

static void yyensure_buffer_stack (yyscan_t yyscanner );
static void yy_load_buffer_state (yyscan_t yyscanner );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len ,yyscan_t yyscanner );

void *yyalloc (yy_size_t ,yyscan_t yyscanner );
void *yyrealloc (void *,yy_size_t ,yyscan_t yyscanner );
void yyfree (void * ,yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 101
#define YY_END_OF_BUFFER 102
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[354] =
    {   0,
        0,    0,  102,  101,    5,    2,    3,  101,    4,   73,
       65,   67,   64,  101,   95,  101,   68,   57,   66,   56,
       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   71,   72,
       96,   96,   96,   69,   70,    5,    1,    0,   94,   93,
        0,    4,   60,   95,   63,   59,   47,   61,    0,   95,
       95,   92,   92,    0,    0,   48,   54,   51,   58,   62,
       50,   53,    0,    0,    0,   96,   96,   20,   96,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
       96,   96,   96,   96,   96,   25,   96,   96,   96,   96,

       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
       96,   96,   96,   93,   95,   95,   46,   45,    0,   95,
       92,    0,   92,   92,   92,    0,    0,   91,   90,    0,
       49,    0,   52,   98,   99,   97,   97,   97,   96,   96,
       96,   14,   96,   31,   96,   96,   96,   96,   96,   96,
       96,   96,   96,   96,   96,   96,    6,   96,   96,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
       96,   96,   26,   96,   96,   96,   95,    0,    0,   92,
       92,   91,   90,    0,   92,   90,   55,    0,   98,    0,
       99,   96,   96,   96,   96,   96,   96,   96,   96,   96,

       96,   96,   96,   28,   96,   22,   21,   16,   96,   35,
       96,   96,   96,   15,   96,   96,   96,   27,   96,   96,
       96,   96,   96,   96,   15,   96,  100,    0,   92,   91,
       90,   92,   98,   98,   99,   99,   96,   13,   41,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
       96,    8,   96,   96,   96,   43,   24,   96,   96,   39,
       96,   96,   13,    0,    0,    0,    0,   96,    0,  100,
       90,   98,   99,   96,   96,   23,   96,   96,   96,   96,
       96,   96,   96,   96,   33,   96,   96,   96,   96,   96,
       34,   96,   32,    0,    0,   79,   75,   74,   77,   76,

       96,  100,  100,   98,   99,   96,   42,   36,   96,   96,
       96,   96,   37,   96,    7,   12,   18,   96,   44,   96,
       96,   78,   81,   80,   96,  100,   29,   96,    9,   96,
       10,   38,   17,   40,   19,   19,  100,   96,   11,    0,
        0,    0,    0,   88,   30,   83,   82,   86,   85,   84,
       89,   87,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    1,    1,    1,    1,    1,
        1,    7,    8,    9,   10,   11,    1,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   13,   14,   15,
       16,   17,    1,    1,   18,   19,   20,   21,   22,   23,
       24,   25,   26,   27,   28,   29,   30,   31,   32,   33,
       27,   34,   35,   36,   37,   38,   39,   40,   41,   27,
       42,   43,   44,    1,   27,    1,   45,   46,   47,   48,

       49,   50,   51,   52,   53,   27,   54,   55,   56,   57,
       58,   59,   27,   60,   61,   62,   63,   64,   65,   66,
       67,   27,   68,    1,   69,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[70] =
    {   0,
        1,    1,    2,    3,    1,    1,    1,    4,    4,    4,
        5,    4,    1,    6,    1,    1,    1,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    6,    1,    1,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    6,    1
    } ;

static yyconst flex_int16_t yy_base[366] =
    {   0,
        0,    0,  493, 1995,  490, 1995,  479,   67,    0, 1995,
       65, 1995,   66,  469,   73,   84, 1995,   77,   58,  462,
       87,  142,  106,   91,  110,  122,   95,  135,  181,  196,
      210,  214,  218,  256,  275,  279,  284,  288, 1995, 1995,
      423,  338,  343, 1995, 1995,  473, 1995,  132, 1995, 1995,
      155,    0, 1995,   68, 1995,  461, 1995,  455,  453,   79,
      100,  420,  120,  174,  235,  436,  435,  433, 1995, 1995,
     1995, 1995,  433,  432,  404,  245,  314,  320,  358,  349,
      377,  415,  371,  421,  431,  447,  451,  425,  476,  480,
      491,  495,  508,  512,  518,  525,  537,  541,  561,  556,

      565,  569,  588,  593,  597,  619,  623,  627,  636,  644,
      654,  663,  672,  190,  426,  136, 1995, 1995,  157,  117,
      384,    0,  360,  232,  685,    0,  331, 1995, 1995,  358,
     1995,  377, 1995,  199,  250, 1995,  381,  372,  389,  683,
      693,  706,  710,  715,  733,  737,  741,  754,  768,  762,
      773,  795,  800,  818,  822,  827,  831,  838,  842,  851,
      858,  868,  879,  885,  895,  899,  921,  912,  925,  929,
      944,  954,  958,  967,  980,  984,  365,  363,  130,  330,
      993,  329,  328,  550,  312,  869, 1995,  314,  153,  309,
      303, 1000, 1013, 1017, 1008, 1040, 1023, 1044, 1064, 1069,

     1082, 1073, 1086, 1090, 1098, 1111, 1115, 1124, 1133, 1138,
     1144, 1148, 1152, 1159, 1163, 1174, 1178, 1200, 1207, 1211,
     1219, 1226, 1236, 1253, 1262, 1240,  234,  173, 1271,  277,
     1283, 1286,  161,  203,  175,  331, 1293, 1307, 1311, 1322,
     1326, 1332, 1338, 1347, 1357, 1364, 1370, 1385, 1389, 1399,
     1403, 1374, 1415, 1426, 1430, 1448, 1453, 1457, 1461, 1465,
     1474, 1478, 1487,  296,  189, 1527,  302, 1498,  295,  239,
     1508,  290,  279, 1538, 1544, 1515, 1548, 1552, 1556, 1583,
     1593, 1609, 1615, 1619, 1624, 1630, 1636, 1645, 1651, 1655,
     1663, 1672, 1678,  223,  264,  255, 1995, 1995, 1995, 1995,

     1688,  258,  305,  204,  169, 1692, 1710, 1714, 1718, 1734,
     1729, 1738, 1746, 1756, 1761, 1765, 1773, 1780, 1787, 1791,
     1807, 1995, 1995, 1995, 1812,  144, 1816, 1820, 1834, 1838,
     1842, 1849, 1855, 1862, 1866, 1870,  112, 1880, 1888,  332,
      457,   97,  263,   73, 1895, 1995, 1995, 1995, 1995, 1995,
     1995, 1995, 1995, 1929, 1935, 1941, 1943, 1948, 1953, 1958,
     1964, 1970, 1976, 1982, 1988
    } ;

static yyconst flex_int16_t yy_def[366] =
    {   0,
      353,    1,  353,  353,  353,  353,  353,  354,  355,  353,
      353,  353,  353,  353,  353,  356,  353,  353,  353,  353,
      357,  357,  357,  357,  357,  357,  357,  357,  357,  357,
      357,  357,  357,  357,  357,  357,  357,  357,  353,  353,
       22,  357,  357,  353,  353,  353,  353,  354,  353,  353,
      354,  355,  353,  353,  353,  353,  353,  353,  353,  353,
      353,  358,  359,  360,  356,  353,  353,  353,  353,  353,
      353,  353,  353,  353,  361,  357,  357,  357,  357,  357,
      357,  357,  357,  357,  357,  357,  357,  357,  357,  357,
      357,  357,  357,  357,  357,  357,  357,  357,  357,  357,

      357,  357,  357,  357,  357,  357,  357,  357,  357,  357,
      357,  357,  357,  354,  353,  353,  353,  353,  353,  353,
      358,  362,  358,  359,  363,  364,  360,  353,  353,  360,
      353,  353,  353,  353,  353,  353,  353,  353,  357,  357,
      357,  357,  357,  357,  357,  357,  357,  357,  357,  357,
      357,  357,  357,  357,  357,  357,  357,  357,  357,  357,
      357,  357,  357,  357,  357,  357,  357,  357,  357,  357,
      357,  357,  357,  357,  357,  357,  353,  353,  353,  358,
      363,  358,  358,  365,  358,  360,  353,  353,  353,  353,
      353,  357,  357,  357,  357,  357,  357,  357,  357,  357,

      357,  357,  357,  357,  357,  357,  357,  357,  357,  357,
      357,  357,  357,  357,  357,  357,  357,  357,  357,  357,
      357,  357,  357,  357,  357,  357,  353,  353,  363,  358,
      363,  363,  353,  353,  353,  353,  357,  357,  357,  357,
      357,  357,  357,  357,  357,  357,  357,  357,  357,  357,
      357,  357,  357,  357,  357,  357,  357,  357,  357,  357,
      357,  357,  357,  353,  353,  361,  353,  357,  353,  353,
      363,  353,  353,  357,  357,  357,  357,  357,  357,  357,
      357,  357,  357,  357,  357,  357,  357,  357,  357,  357,
      357,  357,  357,  353,  353,  353,  353,  353,  353,  353,

      357,  353,  353,  353,  353,  357,  357,  357,  357,  357,
      357,  357,  357,  357,  357,  357,  357,  357,  357,  357,
      357,  353,  353,  353,  357,  353,  357,  357,  357,  357,
      357,  357,  357,  357,  357,  357,  353,  357,  357,  353,
      353,  266,  353,  353,  357,  353,  353,  353,  353,  353,
      353,  353,    0,  353,  353,  353,  353,  353,  353,  353,
      353,  353,  353,  353,  353
    } ;

static yyconst flex_int16_t yy_nxt[2065] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
       24,   25,   26,   27,   28,   27,   27,   27,   29,   30,
       31,   32,   33,   34,   35,   36,   27,   37,   27,   27,
       38,   39,    4,   40,   21,   41,   23,   24,   25,   26,
       27,   28,   27,   27,   29,   30,   31,   32,   42,   34,
       35,   36,   27,   43,   27,   27,   38,   44,   45,   49,
       49,   50,   53,   70,   71,   56,   54,   54,  115,  116,
       55,   59,   57,   60,   61,   63,   66,   59,   64,  352,
      120,   67,   68,   69,   73,   74,   73,   75,   73,   74,

       73,   75,   73,   74,   73,   75,   77,  349,   59,   51,
       60,   61,   85,   73,   74,   73,   75,   73,   74,   73,
       75,  124,   78,  337,  125,   59,   65,   83,  120,   73,
       74,   73,   75,   77,   49,   49,   50,   84,  178,   85,
       86,  228,   73,   74,   73,   75,  115,  116,   78,   73,
       74,   73,   75,   87,   83,  337,   88,   49,   49,  114,
       89,  188,  126,   84,  234,  178,   86,  179,  119,   90,
       79,  272,  233,   80,   51,   81,  128,  128,  129,   87,
      305,  178,   82,   88,  228,  273,  235,   89,   73,   74,
       73,   75,   49,   49,   50,   90,   79,   51,  298,   80,

      134,   81,   91,   73,   74,   73,   75,  188,   82,  189,
      134,  188,   92,   93,  234,  304,  130,   73,   74,   73,
       75,   73,   74,   73,   75,   73,   74,   73,   75,   91,
       94,   95,   51,  124,  134,   99,  125,  353,   92,  322,
       93,   96,  269,  100,  270,  227,   97,  269,   62,  101,
      303,   98,   73,   74,   73,   75,   94,  190,   95,  190,
      191,  135,   99,   73,   74,   73,   75,   96,  326,  302,
      100,  324,   97,  102,  126,  101,   62,   98,  350,  351,
      323,  103,   73,   74,   73,   75,   73,   74,   73,   75,
      305,   73,   74,   73,   75,   73,   74,   73,   75,  104,

      102,  304,   62,  297,  107,  108,  302,  134,  103,  110,
      190,  105,  190,  269,  236,  106,  303,  300,  109,  122,
      235,   73,   74,   73,   75,  233,  104,   73,   74,   73,
       75,  107,  108,  128,  128,  129,  110,  105,  190,  346,
      190,  106,  236,  134,  109,   73,   74,   73,   75,  140,
       73,   74,   73,   75,  122,   99,   73,   74,   73,   75,
      128,  128,  186,  100,  108,   73,   74,   73,   75,  101,
      122,  122,  122,  130,  227,  140,  177,  109,   73,   74,
       73,   75,   99,  135,   73,   74,   73,   75,  142,  141,
      112,  113,  134,  187,  143,  101,   73,   74,   73,   75,

      130,  145,  122,  109,  136,  136,  136,  136,  136,  136,
      136,  137,  138,  137,  142,  141,  136,  136,  136,  136,
      136,  143,   73,   74,   73,   75,  122,  145,   73,   74,
       73,   75,   73,   74,   73,   75,  144,  177,   73,   74,
       73,   75,  151,  135,  134,  136,  136,  136,  147,  133,
      146,  132,  131,  148,   73,   74,   73,   75,   73,   74,
       73,   75,  122,  144,  119,  118,  347,  149,  134,  151,
      117,  136,  136,  348,   46,  147,  146,  111,   72,   58,
      148,   47,  150,   73,   74,   73,   75,   73,   74,   73,
       75,   46,  353,  353,  149,  353,  152,  353,   73,   74,

       73,   75,   73,   74,   73,   75,  353,  353,  150,  353,
      353,  353,  153,  154,  353,   73,   74,   73,   75,   73,
       74,   73,   75,  152,  353,   73,   74,   73,   75,  155,
      353,  157,   73,   74,   73,   75,  353,  353,  153,  353,
      154,  156,  353,  353,   73,   74,   73,   75,   73,   74,
       73,   75,  128,  230,  231,  155,  158,  160,  157,  353,
      159,  353,  161,   73,   74,   73,   75,  156,   73,   74,
       73,   75,   73,   74,   73,   75,   73,   74,   73,   75,
      353,  353,  158,  353,  160,  353,  159,  353,  163,  161,
      164,  353,  232,  353,  162,   73,   74,   73,   75,  165,

       73,   74,   73,   75,   73,   74,   73,   75,  353,  353,
      353,  166,  353,  353,  163,  168,  353,  164,  353,  353,
      162,  353,  353,  353,  167,  165,   73,   74,   73,   75,
       73,   74,   73,   75,   73,   74,   73,   75,  166,  353,
      353,  353,  168,   73,   74,   73,   75,  353,  169,  353,
      167,   73,   74,   73,   75,  353,  353,  353,  170,  353,
      171,   73,   74,   73,   75,  353,  353,  353,  172,  353,
       73,   74,   73,   75,  169,  353,  353,  353,  173,   73,
       74,   73,   75,  353,  170,  141,  171,  182,  182,  183,
       73,   74,   73,   75,  172,  163,  353,  353,  127,  353,

       73,   74,   73,   75,  173,  171,  353,  353,  192,  353,
      353,  174,  193,   73,   74,   73,   75,   73,   74,   73,
       75,  175,   73,   74,   73,   75,  127,  184,  353,  194,
      353,  176,  353,  353,  353,  192,  353,  353,  353,  193,
       73,   74,   73,   75,   73,   74,   73,   75,   73,   74,
       73,   75,  127,  353,  353,  353,  194,  353,  353,  353,
      197,   73,   74,   73,   75,  353,  196,  353,  195,   73,
       74,   73,   75,  198,  199,   73,   74,   73,   75,  353,
       73,   74,   73,   75,  353,  353,  353,  197,  200,  353,
      353,  353,  196,  203,  195,  353,  353,  202,  201,  353,

      198,  199,   73,   74,   73,   75,  353,   73,   74,   73,
       75,  353,  353,  353,  200,  353,  204,  205,  353,  353,
      203,  353,  353,  202,  201,   73,   74,   73,   75,   73,
       74,   73,   75,  353,   73,   74,   73,   75,   73,   74,
       73,   75,  353,  204,  205,   73,   74,   73,   75,   73,
       74,   73,   75,  206,  208,  353,  353,  207,   73,   74,
       73,   75,  353,  210,  353,   73,   74,   73,   75,  353,
      209,  128,  128,  129,  211,   73,   74,   73,   75,  206,
      208,  353,  353,  207,  353,  213,   73,   74,   73,   75,
      210,  212,   73,   74,   73,   75,  209,  353,  353,  353,

      214,  211,   73,   74,   73,   75,   73,   74,   73,   75,
      353,  130,  213,  353,  353,  215,  353,  212,  216,   73,
       74,   73,   75,  217,  353,  353,  353,  214,   73,   74,
       73,   75,   73,   74,   73,   75,   73,   74,   73,   75,
      353,  215,  353,  220,  353,  216,  353,  219,  353,  353,
      217,   73,   74,   73,   75,  353,  353,  221,  353,  218,
      353,   73,   74,   73,   75,   73,   74,   73,   75,  353,
      220,  223,  353,  219,   73,   74,   73,   75,  353,  222,
      353,  353,  353,  221,  353,  218,  193,   73,   74,   73,
       75,   73,   74,   73,   75,  182,  182,  183,  223,  353,

      353,  214,  353,  353,  353,  222,  127,   73,   74,   73,
       75,  353,  353,  224,  353,   73,   74,   73,   75,  222,
       73,   74,   73,   75,   73,   74,   73,   75,  225,  241,
       73,   74,   73,   75,  127,  184,  353,  237,  239,  353,
      238,  353,  353,  353,  240,  226,  353,   73,   74,   73,
       75,   73,   74,   73,   75,  353,  241,  353,  243,  353,
      127,  242,  353,  237,  353,  239,  238,  353,  353,  353,
      240,   73,   74,   73,   75,  244,   73,   74,   73,   75,
       73,   74,   73,   75,  243,  245,  353,  353,  242,   73,
       74,   73,   75,   73,   74,   73,   75,   73,   74,   73,

       75,  244,  353,  248,  246,   73,   74,   73,   75,  353,
      353,  249,  245,  247,  353,  353,  353,  250,   73,   74,
       73,   75,   73,   74,   73,   75,  353,  353,  353,  248,
      246,   73,   74,   73,   75,  353,  353,  353,  249,  247,
       73,   74,   73,   75,  250,   73,   74,   73,   75,  353,
      251,   73,   74,   73,   75,   73,   74,   73,   75,   73,
       74,   73,   75,  353,  353,  252,   73,   74,   73,   75,
       73,   74,   73,   75,  353,  353,  253,  251,  353,  353,
      254,   73,   74,   73,   75,   73,   74,   73,   75,  353,
      353,  353,  252,  353,  353,  256,  353,  353,  255,  353,

      353,  353,  253,  353,  353,  353,  254,   73,   74,   73,
       75,  353,  353,  257,   73,   74,   73,   75,   73,   74,
       73,   75,  256,  353,  255,  353,   73,   74,   73,   75,
      353,  353,  258,   73,   74,   73,   75,  353,  353,  257,
      260,  353,  259,   73,   74,   73,   75,   73,   74,   73,
       75,  261,  353,  353,  353,  262,  353,  353,  353,  258,
       73,   74,   73,   75,  353,  261,  353,  260,  259,  264,
       74,  265,  266,  182,  182,  183,  353,  267,  261,  353,
      238,  353,  262,  353,  127,  182,  182,  183,  182,  182,
      271,  353,  268,  353,  353,  353,  127,  353,  353,  127,

       73,   74,   73,   75,  353,  353,  263,  353,  353,  353,
      274,  353,  127,  184,   73,   74,   73,   75,   73,   74,
       73,   75,  353,  353,  127,  184,  353,  127,  184,   73,
       74,   73,   75,   73,   74,   73,   75,  274,  127,   73,
       74,   73,   75,  275,  353,   73,   74,   73,   75,  353,
      127,  353,  353,  127,   73,   74,   73,   75,  353,  276,
      353,  353,  277,  278,   73,   74,   73,   75,  353,  353,
      275,   73,   74,   73,   75,  279,  353,   73,   74,   73,
       75,   73,   74,   73,   75,  276,  353,  353,  277,  353,
      278,  280,   73,   74,   73,   75,   73,   74,   73,   75,

      353,  279,  353,  353,  281,  282,   73,   74,   73,   75,
       73,   74,   73,   75,  353,  353,  283,  280,  353,  284,
      285,  353,   73,   74,   73,   75,  286,  353,  353,  353,
      281,  282,  287,   73,   74,   73,   75,   73,   74,   73,
       75,  353,  283,  353,  353,  284,  353,  285,  353,  353,
      353,  289,  353,  286,  288,   73,   74,   73,   75,  287,
       73,   74,   73,   75,   73,   74,   73,   75,   73,   74,
       73,   75,   73,   74,   73,   75,  353,  353,  289,  353,
      288,   73,   74,   73,   75,   73,   74,   73,   75,  291,
      353,  353,  290,  292,   73,   74,  294,   75,  353,  293,

      353,  353,  295,  296,  353,   73,   74,   73,   75,  353,
      182,  182,  183,  353,  353,  291,  353,  292,  290,  353,
      292,  127,   73,   74,   73,   75,  293,  136,  136,  136,
      136,  136,  136,  136,  137,  138,  137,  299,  353,  136,
      136,  136,  136,  136,  301,   73,   74,   73,   75,  127,
      184,   73,   74,   73,   75,   73,   74,   73,   75,   73,
       74,   73,   75,   73,   74,   73,   75,  353,  136,  136,
      136,  353,  353,  306,  353,  127,  353,  353,  353,  307,
      353,  353,  353,  308,  353,  353,  353,  310,  353,  309,
       73,   74,   73,   75,  136,  136,  353,  353,  353,  306,

       73,   74,   73,   75,  353,  307,  353,  353,  311,  308,
      353,  353,  353,  310,  353,  309,   73,   74,   73,   75,
      353,  312,   73,   74,   73,   75,   73,   74,   73,   75,
      313,   73,   74,   73,   75,  311,  353,   73,   74,   73,
       75,  353,  315,   73,   74,   73,   75,  312,  353,  353,
      314,  316,   73,   74,   73,   75,  353,  313,   73,   74,
       73,   75,   73,   74,   73,   75,  318,  353,  317,  315,
       73,   74,   73,   75,  353,  353,  314,  353,  316,   73,
       74,   73,   75,  320,  319,   73,   74,   73,   75,  321,
      353,  353,  353,  318,  317,   73,   74,   73,   75,   73,

       74,   73,   75,  353,  353,  321,  353,  353,  353,  320,
      319,  353,  353,  327,  353,  353,  321,   73,   74,   73,
       75,   73,   74,   73,   75,   73,   74,   73,   75,  353,
      353,  353,  325,  353,  353,  328,   73,   74,   73,   75,
      327,   73,   74,   73,   75,   73,   74,   73,   75,  353,
      353,  353,  330,   73,   74,   73,   75,  353,  353,  331,
      353,  353,  328,   73,   74,   73,   75,  329,   73,   74,
       73,   75,   73,   74,   73,   75,  353,  332,  353,  330,
       73,   74,   73,   75,  353,  353,  331,   73,   74,   73,
       75,  353,  353,  329,   73,   74,   73,   75,   73,   74,

       73,   75,  353,  353,  332,  353,  353,  353,  333,  353,
      353,  353,  334,  353,   73,   74,   73,   75,  353,   73,
       74,   73,   75,   73,   74,   73,   75,   73,   74,   73,
       75,  353,  353,  353,  333,  335,  353,  353,  353,  334,
      335,   73,   74,   73,   75,   73,   74,   73,   75,   73,
       74,   73,   75,  353,  353,  338,   73,   74,   73,   75,
      353,  335,   73,   74,   73,   75,  336,  353,  339,   73,
       74,   73,   75,   73,   74,   73,   75,  340,   74,  341,
      342,  338,  353,  353,  353,  343,  344,   73,   74,   73,
       75,  353,  353,  353,  339,   73,   74,   73,   75,  353,

      353,  345,   73,   74,   73,   75,  353,  353,  353,  353,
      353,  353,  353,  353,  353,  353,  353,  353,  353,  353,
      353,  353,  353,  353,  353,  353,  353,  353,  345,   48,
       48,   48,   48,   48,   48,   52,  353,  353,   52,   52,
       52,   62,   62,   62,   62,   62,   76,   76,  121,  121,
      121,  121,  121,  123,  123,  123,  123,  123,  127,  127,
      127,  127,  127,  127,  139,  139,  139,  139,  353,  139,
      180,  353,  180,  180,  180,  180,  181,  181,  181,  181,
      181,  181,  185,  353,  185,  185,  185,  185,  229,  229,
      229,  229,  229,  229,    3,  353,  353,  353,  353,  353,

      353,  353,  353,  353,  353,  353,  353,  353,  353,  353,
      353,  353,  353,  353,  353,  353,  353,  353,  353,  353,
      353,  353,  353,  353,  353,  353,  353,  353,  353,  353,
      353,  353,  353,  353,  353,  353,  353,  353,  353,  353,
      353,  353,  353,  353,  353,  353,  353,  353,  353,  353,
      353,  353,  353,  353,  353,  353,  353,  353,  353,  353,
      353,  353,  353,  353
    } ;

static yyconst flex_int16_t yy_chk[2065] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    8,
        8,    8,   11,   19,   19,   13,   11,   13,   54,   54,
       11,   15,   13,   15,   15,   16,   18,   60,   16,  344,
       60,   18,   18,   18,   21,   21,   21,   21,   24,   24,

       24,   24,   27,   27,   27,   27,   21,  342,   61,    8,
       61,   61,   24,   23,   23,   23,   23,   25,   25,   25,
       25,   63,   21,  337,   63,  120,   16,   23,  120,   26,
       26,   26,   26,   21,   48,   48,   48,   23,  179,   24,
       25,  179,   28,   28,   28,   28,  116,  116,   21,   22,
       22,   22,   22,   26,   23,  326,   28,   51,   51,   51,
       28,  189,   63,   23,  189,  119,   25,  119,  119,   28,
       22,  233,  233,   22,   48,   22,   64,   64,   64,   26,
      305,  228,   22,   28,  228,  235,  235,   28,   29,   29,
       29,   29,  114,  114,  114,   28,   22,   51,  265,   22,

      265,   22,   29,   30,   30,   30,   30,  134,   22,  134,
      134,  234,   29,   30,  234,  304,   64,   31,   31,   31,
       31,   32,   32,   32,   32,   33,   33,   33,   33,   29,
       30,   31,  114,  124,  294,   33,  124,   65,   29,  294,
       30,   31,  227,   33,  227,  227,   31,  270,   65,   33,
      270,   32,   76,   76,   76,   76,   30,  135,   31,  135,
      135,  135,   33,   34,   34,   34,   34,   31,  302,  302,
       33,  296,   31,   34,  124,   33,   65,   32,  343,  343,
      295,   34,   35,   35,   35,   35,   36,   36,   36,   36,
      273,   37,   37,   37,   37,   38,   38,   38,   38,   35,

       34,  272,   65,  264,   36,   37,  269,  264,   34,   38,
      191,   35,  191,  303,  191,   35,  303,  267,   37,  230,
      190,   77,   77,   77,   77,  188,   35,   78,   78,   78,
       78,   36,   37,  127,  127,  127,   38,   35,  236,  340,
      236,   35,  236,  340,   37,   42,   42,   42,   42,   77,
       43,   43,   43,   43,  185,   42,   80,   80,   80,   80,
      130,  130,  130,   42,   43,   79,   79,   79,   79,   42,
      183,  182,  180,  127,  178,   77,  177,   43,   83,   83,
       83,   83,   42,  138,   81,   81,   81,   81,   80,   79,
       42,   43,  137,  132,   81,   42,  139,  139,  139,  139,

      130,   83,  123,   43,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   80,   79,   75,   75,   75,   75,
       75,   81,   82,   82,   82,   82,  121,   83,   84,   84,
       84,   84,   88,   88,   88,   88,   82,  115,   85,   85,
       85,   85,   88,   74,   73,   75,   75,   75,   85,   68,
       84,   67,   66,   85,   86,   86,   86,   86,   87,   87,
       87,   87,   62,   82,   59,   58,  341,   86,  341,   88,
       56,   75,   75,  341,   46,   85,   84,   41,   20,   14,
       85,    7,   87,   89,   89,   89,   89,   90,   90,   90,
       90,    5,    3,    0,   86,    0,   89,    0,   91,   91,

       91,   91,   92,   92,   92,   92,    0,    0,   87,    0,
        0,    0,   90,   91,    0,   93,   93,   93,   93,   94,
       94,   94,   94,   89,    0,   95,   95,   95,   95,   92,
        0,   94,   96,   96,   96,   96,    0,    0,   90,    0,
       91,   93,    0,    0,   97,   97,   97,   97,   98,   98,
       98,   98,  184,  184,  184,   92,   95,   97,   94,    0,
       96,    0,   98,  100,  100,  100,  100,   93,   99,   99,
       99,   99,  101,  101,  101,  101,  102,  102,  102,  102,
        0,    0,   95,    0,   97,    0,   96,    0,  100,   98,
      101,    0,  184,    0,   99,  103,  103,  103,  103,  102,

      104,  104,  104,  104,  105,  105,  105,  105,    0,    0,
        0,  103,    0,    0,  100,  105,    0,  101,    0,    0,
       99,    0,    0,    0,  104,  102,  106,  106,  106,  106,
      107,  107,  107,  107,  108,  108,  108,  108,  103,    0,
        0,    0,  105,  109,  109,  109,  109,    0,  106,    0,
      104,  110,  110,  110,  110,    0,    0,    0,  107,    0,
      108,  111,  111,  111,  111,    0,    0,    0,  109,    0,
      112,  112,  112,  112,  106,    0,    0,    0,  110,  113,
      113,  113,  113,    0,  107,  111,  108,  125,  125,  125,
      140,  140,  140,  140,  109,  112,    0,    0,  125,    0,

      141,  141,  141,  141,  110,  113,    0,    0,  140,    0,
        0,  111,  141,  142,  142,  142,  142,  143,  143,  143,
      143,  112,  144,  144,  144,  144,  125,  125,    0,  143,
        0,  113,    0,    0,    0,  140,    0,    0,    0,  141,
      145,  145,  145,  145,  146,  146,  146,  146,  147,  147,
      147,  147,  125,    0,    0,    0,  143,    0,    0,    0,
      147,  148,  148,  148,  148,    0,  146,    0,  145,  150,
      150,  150,  150,  148,  148,  149,  149,  149,  149,    0,
      151,  151,  151,  151,    0,    0,    0,  147,  148,    0,
        0,    0,  146,  151,  145,    0,    0,  150,  149,    0,

      148,  148,  152,  152,  152,  152,    0,  153,  153,  153,
      153,    0,    0,    0,  148,    0,  152,  153,    0,    0,
      151,    0,    0,  150,  149,  154,  154,  154,  154,  155,
      155,  155,  155,    0,  156,  156,  156,  156,  157,  157,
      157,  157,    0,  152,  153,  158,  158,  158,  158,  159,
      159,  159,  159,  154,  156,    0,    0,  155,  160,  160,
      160,  160,    0,  159,    0,  161,  161,  161,  161,    0,
      158,  186,  186,  186,  160,  162,  162,  162,  162,  154,
      156,    0,    0,  155,    0,  162,  163,  163,  163,  163,
      159,  161,  164,  164,  164,  164,  158,    0,    0,    0,

      163,  160,  165,  165,  165,  165,  166,  166,  166,  166,
        0,  186,  162,    0,    0,  164,    0,  161,  165,  168,
      168,  168,  168,  166,    0,    0,    0,  163,  167,  167,
      167,  167,  169,  169,  169,  169,  170,  170,  170,  170,
        0,  164,    0,  169,    0,  165,    0,  168,    0,    0,
      166,  171,  171,  171,  171,    0,    0,  170,    0,  167,
        0,  172,  172,  172,  172,  173,  173,  173,  173,    0,
      169,  172,    0,  168,  174,  174,  174,  174,    0,  171,
        0,    0,    0,  170,    0,  167,  174,  175,  175,  175,
      175,  176,  176,  176,  176,  181,  181,  181,  172,    0,

        0,  175,    0,    0,    0,  171,  181,  192,  192,  192,
      192,    0,    0,  174,    0,  195,  195,  195,  195,  176,
      193,  193,  193,  193,  194,  194,  194,  194,  175,  195,
      197,  197,  197,  197,  181,  181,    0,  192,  194,    0,
      193,    0,    0,    0,  194,  176,    0,  196,  196,  196,
      196,  198,  198,  198,  198,    0,  195,    0,  197,    0,
      181,  196,    0,  192,    0,  194,  193,    0,    0,    0,
      194,  199,  199,  199,  199,  198,  200,  200,  200,  200,
      202,  202,  202,  202,  197,  199,    0,    0,  196,  201,
      201,  201,  201,  203,  203,  203,  203,  204,  204,  204,

      204,  198,    0,  202,  200,  205,  205,  205,  205,    0,
        0,  203,  199,  201,    0,    0,    0,  205,  206,  206,
      206,  206,  207,  207,  207,  207,    0,    0,    0,  202,
      200,  208,  208,  208,  208,    0,    0,    0,  203,  201,
      209,  209,  209,  209,  205,  210,  210,  210,  210,    0,
      209,  211,  211,  211,  211,  212,  212,  212,  212,  213,
      213,  213,  213,    0,    0,  211,  214,  214,  214,  214,
      215,  215,  215,  215,    0,    0,  212,  209,    0,    0,
      213,  216,  216,  216,  216,  217,  217,  217,  217,    0,
        0,    0,  211,    0,    0,  216,    0,    0,  215,    0,

        0,    0,  212,    0,    0,    0,  213,  218,  218,  218,
      218,    0,    0,  217,  219,  219,  219,  219,  220,  220,
      220,  220,  216,    0,  215,    0,  221,  221,  221,  221,
        0,    0,  219,  222,  222,  222,  222,    0,    0,  217,
      221,    0,  220,  223,  223,  223,  223,  226,  226,  226,
      226,  222,    0,    0,    0,  223,    0,    0,    0,  219,
      224,  224,  224,  224,    0,  226,    0,  221,  220,  225,
      225,  225,  225,  229,  229,  229,    0,  225,  222,    0,
      224,    0,  223,    0,  229,  231,  231,  231,  232,  232,
      232,    0,  226,    0,    0,    0,  231,    0,    0,  232,

      237,  237,  237,  237,    0,    0,  224,    0,    0,    0,
      237,    0,  229,  229,  238,  238,  238,  238,  239,  239,
      239,  239,    0,    0,  231,  231,    0,  232,  232,  240,
      240,  240,  240,  241,  241,  241,  241,  237,  229,  242,
      242,  242,  242,  240,    0,  243,  243,  243,  243,    0,
      231,    0,    0,  232,  244,  244,  244,  244,    0,  241,
        0,    0,  242,  243,  245,  245,  245,  245,    0,    0,
      240,  246,  246,  246,  246,  244,    0,  247,  247,  247,
      247,  252,  252,  252,  252,  241,    0,    0,  242,    0,
      243,  245,  248,  248,  248,  248,  249,  249,  249,  249,

        0,  244,    0,    0,  246,  247,  250,  250,  250,  250,
      251,  251,  251,  251,    0,    0,  248,  245,    0,  249,
      250,    0,  253,  253,  253,  253,  251,    0,    0,    0,
      246,  247,  253,  254,  254,  254,  254,  255,  255,  255,
      255,    0,  248,    0,    0,  249,    0,  250,    0,    0,
        0,  255,    0,  251,  254,  256,  256,  256,  256,  253,
      257,  257,  257,  257,  258,  258,  258,  258,  259,  259,
      259,  259,  260,  260,  260,  260,    0,    0,  255,    0,
      254,  261,  261,  261,  261,  262,  262,  262,  262,  259,
        0,    0,  258,  261,  263,  263,  263,  263,    0,  262,

        0,    0,  263,  263,    0,  268,  268,  268,  268,    0,
      271,  271,  271,    0,    0,  259,    0,  268,  258,    0,
      261,  271,  276,  276,  276,  276,  262,  266,  266,  266,
      266,  266,  266,  266,  266,  266,  266,  266,    0,  266,
      266,  266,  266,  266,  268,  274,  274,  274,  274,  271,
      271,  275,  275,  275,  275,  277,  277,  277,  277,  278,
      278,  278,  278,  279,  279,  279,  279,    0,  266,  266,
      266,    0,    0,  274,    0,  271,    0,    0,    0,  275,
        0,    0,    0,  277,    0,    0,    0,  279,    0,  278,
      280,  280,  280,  280,  266,  266,    0,    0,    0,  274,

      281,  281,  281,  281,    0,  275,    0,    0,  280,  277,
        0,    0,    0,  279,    0,  278,  282,  282,  282,  282,
        0,  281,  283,  283,  283,  283,  284,  284,  284,  284,
      282,  285,  285,  285,  285,  280,    0,  286,  286,  286,
      286,    0,  284,  287,  287,  287,  287,  281,    0,    0,
      283,  286,  288,  288,  288,  288,    0,  282,  289,  289,
      289,  289,  290,  290,  290,  290,  288,    0,  287,  284,
      291,  291,  291,  291,    0,    0,  283,    0,  286,  292,
      292,  292,  292,  290,  289,  293,  293,  293,  293,  292,
        0,    0,    0,  288,  287,  301,  301,  301,  301,  306,

      306,  306,  306,    0,    0,  301,    0,    0,    0,  290,
      289,    0,    0,  306,    0,    0,  292,  307,  307,  307,
      307,  308,  308,  308,  308,  309,  309,  309,  309,    0,
        0,    0,  301,    0,    0,  309,  311,  311,  311,  311,
      306,  310,  310,  310,  310,  312,  312,  312,  312,    0,
        0,    0,  311,  313,  313,  313,  313,    0,    0,  312,
        0,    0,  309,  314,  314,  314,  314,  310,  315,  315,
      315,  315,  316,  316,  316,  316,    0,  314,    0,  311,
      317,  317,  317,  317,    0,    0,  312,  318,  318,  318,
      318,    0,    0,  310,  319,  319,  319,  319,  320,  320,

      320,  320,    0,    0,  314,    0,    0,    0,  318,    0,
        0,    0,  320,    0,  321,  321,  321,  321,    0,  325,
      325,  325,  325,  327,  327,  327,  327,  328,  328,  328,
      328,    0,    0,    0,  318,  321,    0,    0,    0,  320,
      325,  329,  329,  329,  329,  330,  330,  330,  330,  331,
      331,  331,  331,    0,    0,  328,  332,  332,  332,  332,
        0,  321,  333,  333,  333,  333,  325,    0,  330,  334,
      334,  334,  334,  335,  335,  335,  335,  336,  336,  336,
      336,  328,    0,    0,    0,  336,  336,  338,  338,  338,
      338,    0,    0,    0,  330,  339,  339,  339,  339,    0,

        0,  338,  345,  345,  345,  345,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  338,  354,
      354,  354,  354,  354,  354,  355,    0,    0,  355,  355,
      355,  356,  356,  356,  356,  356,  357,  357,  358,  358,
      358,  358,  358,  359,  359,  359,  359,  359,  360,  360,
      360,  360,  360,  360,  361,  361,  361,  361,    0,  361,
      362,    0,  362,  362,  362,  362,  363,  363,  363,  363,
      363,  363,  364,    0,  364,  364,  364,  364,  365,  365,
      365,  365,  365,  365,  353,  353,  353,  353,  353,  353,

      353,  353,  353,  353,  353,  353,  353,  353,  353,  353,
      353,  353,  353,  353,  353,  353,  353,  353,  353,  353,
      353,  353,  353,  353,  353,  353,  353,  353,  353,  353,
      353,  353,  353,  353,  353,  353,  353,  353,  353,  353,
      353,  353,  353,  353,  353,  353,  353,  353,  353,  353,
      353,  353,  353,  353,  353,  353,  353,  353,  353,  353,
      353,  353,  353,  353
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "language2.ll"
#line 5 "language2.ll"
/*
    This file is part of Msc-generator.
    Copyright 2008,2009,2010,2011,2012,2013 Zoltan Turanyi
    Distributed under GNU Affero General Public License.

    Msc-generator is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    Msc-generator is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with Msc-generator.  If not, see <http://www.gnu.org/licenses/>.
*/

#ifdef COLOR_SYNTAX_HIGHLIGHT
#define C_S_H (1)
#define C_S_H_IS_COMPILED
#else
#define C_S_H (0)
#endif

#include <stdio.h>
#include <string.h>
#include <iostream>

#ifdef C_S_H_IS_COMPILED
#include "csh.h"
#define YYMSC_RESULT_TYPE Csh
#define RESULT csh

//If we scan for color syntax highlight use this location
//yyerror is defined by bison, the other is defined for flex
#define YYLTYPE_IS_DECLARED
#define YYLTYPE CshPos
#define CHAR_IF_CSH(A) char

#include "colorsyntax.h"
#include "language_misc.h"
#include "commands.h" //MSC_* defs and CommandNote
#else
#include "msc.h"
#define YYMSC_RESULT_TYPE Msc
#define RESULT msc

#define CHAR_IF_CSH(A) A
#include "language.h"
#include "language_misc.h"
#endif

#ifdef C_S_H_IS_COMPILED

#define YY_INPUT(buffer, res, max_size)             \
do {                                                \
    parse_parm *pp = yyget_extra(yyscanner);        \
    if (pp->pos >= pp->length)                      \
        res = YY_NULL;                              \
    else                                            \
    {                                               \
        res = pp->length - pp->pos;                 \
        res > (int)max_size ? res = max_size : 0;   \
        memcpy(buffer, pp->buf + pp->pos, res);     \
        pp->pos += res;                             \
    }                                               \
} while (0)

#define YY_USER_ACTION do {                     \
    yylloc->first_pos = yylloc->last_pos+1;     \
    yylloc->last_pos = yylloc->last_pos+yyleng; \
    } while(0);

#define YYRHSLOC(Rhs, K) ((Rhs)[K])

#define YYLLOC_DEFAULT(Current, Rhs, N)                  \
    do                                                   \
      if (YYID (N))                                      \
    {                                                    \
      (Current).first_pos = YYRHSLOC (Rhs, 1).first_pos; \
      (Current).last_pos  = YYRHSLOC (Rhs, N).last_pos;  \
    }                                                    \
      else                                               \
    {                                                    \
        (Current).first_pos = (Current).last_pos   =     \
        YYRHSLOC (Rhs, 0).last_pos;                      \
    }                                                    \
    while (YYID (0))

#else

//Read in 512-byte chunks
//We use this low value to make progress reporint more frequent
#define YY_READ_BUF_SIZE 512

#define YY_INPUT(buffer, res, max_size)             \
do {                                                \
    parse_parm *pp = yyget_extra(yyscanner);        \
    if (pp->pos >= pp->length)                      \
        res = YY_NULL;                              \
    else                                            \
    {                                               \
        res = pp->length - pp->pos;                 \
        res > (int)max_size ? res = max_size : 0;   \
        memcpy(buffer, pp->buf + pp->pos, res);     \
        pp->msc->Progress.DoneItem(MscProgress::PARSE, res); \
        pp->pos += res;                             \
    }                                               \
} while (0)

#define YY_USER_ACTION do {                              \
    yylloc->first_line = yylloc->last_line;              \
    yylloc->first_column = yylloc->last_column+1;        \
    yylloc->last_column = yylloc->first_column+yyleng-1; \
    } while(0);

#include "parse_tools.h"

#endif /* C_S_H_IS_COMPILED */

#line 1137 "<stdout>"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int yylex_init (yyscan_t* scanner);

int yylex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (yyscan_t yyscanner );

int yyget_debug (yyscan_t yyscanner );

void yyset_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra (yyscan_t yyscanner );

void yyset_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *yyget_in (yyscan_t yyscanner );

void yyset_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *yyget_out (yyscan_t yyscanner );

void yyset_out  (FILE * out_str ,yyscan_t yyscanner );

int yyget_leng (yyscan_t yyscanner );

char *yyget_text (yyscan_t yyscanner );

int yyget_lineno (yyscan_t yyscanner );

void yyset_lineno (int line_number ,yyscan_t yyscanner );

YYSTYPE * yyget_lval (yyscan_t yyscanner );

void yyset_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

       YYLTYPE *yyget_lloc (yyscan_t yyscanner );
    
        void yyset_lloc (YYLTYPE * yylloc_param ,yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (yyscan_t yyscanner );
#else
extern int yywrap (yyscan_t yyscanner );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex \
               (YYSTYPE * yylval_param,YYLTYPE * yylloc_param ,yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 129 "language2.ll"


 /* Newline characters in all forms accepted */
#line 1385 "<stdout>"

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		yy_load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 354 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1995 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 132 "language2.ll"

  #ifndef C_S_H_IS_COMPILED
    msc_jump_line(yylloc);
  #endif

	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 138 "language2.ll"

  #ifndef C_S_H_IS_COMPILED
    msc_jump_line(yylloc);
  #endif

	YY_BREAK
case 3:
YY_RULE_SETUP
#line 144 "language2.ll"

  #ifndef C_S_H_IS_COMPILED
    msc_jump_line(yylloc);
  #endif

	YY_BREAK
/* # starts a comment last until end of line */
case 4:
YY_RULE_SETUP
#line 151 "language2.ll"

  #ifdef C_S_H_IS_COMPILED
    yyget_extra(yyscanner)->csh->AddCSH(*yylloc, COLOR_COMMENT);
  #endif

	YY_BREAK
case 5:
YY_RULE_SETUP
#line 157 "language2.ll"
/* ignore whitespace */;
	YY_BREAK
/* These keywords are case insensitive */
case 6:
YY_RULE_SETUP
#line 160 "language2.ll"
yylval_param->str = strdup(yytext); return TOK_MSC;
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 161 "language2.ll"
yylval_param->str = strdup(yytext); return TOK_COMMAND_HEADING;
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 162 "language2.ll"
yylval_param->str = strdup(yytext); return TOK_COMMAND_NUDGE;
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 163 "language2.ll"
yylval_param->str = strdup(yytext); return TOK_COMMAND_DEFCOLOR;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 164 "language2.ll"
yylval_param->str = strdup(yytext); return TOK_COMMAND_DEFSTYLE;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 165 "language2.ll"
yylval_param->str = strdup(yytext); return TOK_COMMAND_DEFDESIGN;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 166 "language2.ll"
yylval_param->str = strdup(yytext); return TOK_COMMAND_NEWPAGE;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 167 "language2.ll"
yylval_param->str = strdup(yytext); return TOK_COMMAND_BIG;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 168 "language2.ll"
yylval_param->str = strdup(yytext); return TOK_COMMAND_BOX;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 169 "language2.ll"
yylval_param->str = strdup(yytext); return TOK_COMMAND_PIPE;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 170 "language2.ll"
yylval_param->str = strdup(yytext); return TOK_COMMAND_MARK;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 171 "language2.ll"
yylval_param->str = strdup(yytext); return TOK_COMMAND_PARALLEL;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 172 "language2.ll"
yylval_param->str = strdup(yytext); return TOK_COMMAND_OVERLAP;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 173 "language2.ll"
yylval_param->str = strdup(yytext); return TOK_VERTICAL;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 174 "language2.ll"
yylval_param->str = strdup(yytext); return TOK_AT;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 175 "language2.ll"
yylval_param->str = strdup(yytext); return TOK_LOST;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 176 "language2.ll"
yylval_param->str = strdup(yytext); return TOK_AT_POS;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 177 "language2.ll"
yylval_param->str = strdup(yytext); return TOK_AT_POS;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 178 "language2.ll"
yylval_param->str = strdup(yytext); return TOK_AT_POS;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 179 "language2.ll"
yylval_param->str = strdup(yytext); return TOK_BOOLEAN;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 180 "language2.ll"
yylval_param->str = strdup(yytext); return TOK_BOOLEAN;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 181 "language2.ll"
yylval_param->str = strdup(yytext); return TOK_SHOW;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 182 "language2.ll"
yylval_param->str = strdup(yytext); return TOK_HIDE;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 183 "language2.ll"
yylval_param->str = strdup(yytext); return TOK_ACTIVATE;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 184 "language2.ll"
yylval_param->str= strdup(yytext); return TOK_DEACTIVATE;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 185 "language2.ll"
yylval_param->str = strdup(yytext); return TOK_BYE;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 186 "language2.ll"
yylval_param->str = strdup(yytext); return TOK_COMMAND_VSPACE;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 187 "language2.ll"
yylval_param->str = strdup(yytext); return TOK_COMMAND_HSPACE;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 188 "language2.ll"
yylval_param->str = strdup(yytext); return TOK_COMMAND_SYMBOL;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 189 "language2.ll"
yylval_param->str = strdup(yytext); return TOK_COMMAND_NOTE;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 190 "language2.ll"
yylval_param->str = strdup(yytext); return TOK_COMMAND_COMMENT;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 191 "language2.ll"
yylval_param->str = strdup(yytext); return TOK_COMMAND_ENDNOTE;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 192 "language2.ll"
yylval_param->str = strdup(yytext); return TOK_COMMAND_FOOTNOTE;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 193 "language2.ll"
yylval_param->str = strdup(yytext); return TOK_COMMAND_TITLE;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 194 "language2.ll"
yylval_param->str = strdup(yytext); return TOK_COMMAND_SUBTITLE;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 195 "language2.ll"
yylval_param->str = strdup(yytext); return TOK_VERTICAL_SHAPE;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 196 "language2.ll"
yylval_param->str = strdup(yytext); return TOK_VERTICAL_SHAPE;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 197 "language2.ll"
yylval_param->str = strdup(yytext); return TOK_VERTICAL_SHAPE;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 198 "language2.ll"
yylval_param->str = strdup(yytext); return TOK_VERTICAL_SHAPE;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 200 "language2.ll"
yylval_param->arctype=MSC_ARC_DISCO;       return TOK_SPECIAL_ARC;      // ...
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 201 "language2.ll"
yylval_param->arctype=MSC_ARC_DIVIDER;     return TOK_SPECIAL_ARC;      // ---
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 202 "language2.ll"
yylval_param->arctype=MSC_ARC_SOLID;       return TOK_REL_SOLID_TO;     // ->
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 203 "language2.ll"
yylval_param->arctype=MSC_ARC_SOLID;       return TOK_REL_SOLID_FROM;   // <-
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 204 "language2.ll"
yylval_param->arctype=MSC_ARC_SOLID_BIDIR; return TOK_REL_SOLID_BIDIR;  // <->
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 205 "language2.ll"
yylval_param->arctype=MSC_ARC_DOUBLE;      return TOK_REL_DOUBLE_TO;    // =>
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 206 "language2.ll"
yylval_param->arctype=MSC_ARC_DOUBLE;      return TOK_REL_DOUBLE_FROM;  // <=
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 207 "language2.ll"
yylval_param->arctype=MSC_ARC_DOUBLE_BIDIR;return TOK_REL_DOUBLE_BIDIR; // <=>
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 208 "language2.ll"
yylval_param->arctype=MSC_ARC_DASHED;      return TOK_REL_DASHED_TO;    // >>
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 209 "language2.ll"
yylval_param->arctype=MSC_ARC_DASHED;      return TOK_REL_DASHED_FROM;  // <<
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 210 "language2.ll"
yylval_param->arctype=MSC_ARC_DASHED_BIDIR;return TOK_REL_DASHED_BIDIR; // <<>>
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 211 "language2.ll"
yylval_param->arctype=MSC_ARC_DOTTED;      return TOK_REL_DOTTED_TO;    // >
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 212 "language2.ll"
yylval_param->arctype=MSC_ARC_DOTTED;      return TOK_REL_DOTTED_FROM;  // <
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 213 "language2.ll"
yylval_param->arctype=MSC_ARC_DOTTED_BIDIR;return TOK_REL_DOTTED_BIDIR; // <>
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 214 "language2.ll"
yylval_param->arctype=MSC_BOX_SOLID;       return TOK_EMPH;             // --
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 215 "language2.ll"
yylval_param->arctype=MSC_BOX_DASHED;      return TOK_EMPH_PLUS_PLUS;   // ++
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 216 "language2.ll"
yylval_param->arctype=MSC_BOX_DOTTED;      return TOK_EMPH;             // ..
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 217 "language2.ll"
yylval_param->arctype=MSC_BOX_DOUBLE;      return TOK_EMPH;             // ==
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 218 "language2.ll"
return TOK_PLUS_EQUAL;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 219 "language2.ll"
return TOK_DASH;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 220 "language2.ll"
return TOK_PLUS;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 221 "language2.ll"
return TOK_EQUAL;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 222 "language2.ll"
return TOK_COMMA;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 223 "language2.ll"
return TOK_SEMICOLON;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 224 "language2.ll"
return TOK_OCBRACKET;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 225 "language2.ll"
return TOK_CCBRACKET;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 226 "language2.ll"
return TOK_OSBRACKET;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 227 "language2.ll"
return TOK_CSBRACKET;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 228 "language2.ll"
return TOK_ASTERISK;
	YY_BREAK
/* We need to list only those style names, which are not conforming to
  * TOK_STRING above. */
case 74:
YY_RULE_SETUP
#line 232 "language2.ll"
yylval_param->str=strdup(yytext); return TOK_STYLE_NAME;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 233 "language2.ll"
yylval_param->str=strdup(yytext); return TOK_STYLE_NAME;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 234 "language2.ll"
yylval_param->str=strdup(yytext); return TOK_STYLE_NAME;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 235 "language2.ll"
yylval_param->str=strdup(yytext); return TOK_STYLE_NAME;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 236 "language2.ll"
yylval_param->str=strdup(yytext); return TOK_STYLE_NAME;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 237 "language2.ll"
yylval_param->str=strdup(yytext); return TOK_STYLE_NAME;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 238 "language2.ll"
yylval_param->str=strdup(yytext); return TOK_STYLE_NAME;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 239 "language2.ll"
yylval_param->str=strdup(yytext); return TOK_STYLE_NAME;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 240 "language2.ll"
yylval_param->str=strdup(yytext); return TOK_STYLE_NAME;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 241 "language2.ll"
yylval_param->str=strdup(yytext); return TOK_STYLE_NAME;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 242 "language2.ll"
yylval_param->str=strdup(yytext); return TOK_STYLE_NAME;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 243 "language2.ll"
yylval_param->str=strdup(yytext); return TOK_STYLE_NAME;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 244 "language2.ll"
yylval_param->str=strdup(yytext); return TOK_STYLE_NAME;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 245 "language2.ll"
yylval_param->str=strdup(yytext); return TOK_STYLE_NAME;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 246 "language2.ll"
yylval_param->str=strdup(yytext); return TOK_STYLE_NAME;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 247 "language2.ll"
yylval_param->str=strdup(yytext); return TOK_STYLE_NAME;
	YY_BREAK
/* This is a colon-quoted string, finished by a quotation mark
 ** : "<string>"
 ** <string> can contain escaped quotation marks, but no line breaks
 */
case 90:
YY_RULE_SETUP
#line 254 "language2.ll"

  #ifdef C_S_H_IS_COMPILED
    yylval_param->str = strdup(yytext);
  #else
    {
    /* after whitespaces we are guaranteed to have a tailing and heading quot */
    char *s = msc_remove_head_tail_whitespace(yytext+1);
    /* s now points to the heading quotation marks.
    ** Now get rid of both quotation marks */
    std::string str(s+1);
    str.erase(str.length()-1);
    /* Calculate the position of the string and prepend a location escape */
    FileLineCol pos(yyget_extra(yyscanner)->msc->current_file,
                 yylloc->first_line, yylloc->first_column + unsigned(s+1 - yytext));
    yylval_param->str = strdup((pos.Print() + str).c_str());
    }
  #endif
    return TOK_COLON_QUOTED_STRING;

	YY_BREAK
/* This is a colon-quoted string, finished by a newline (trailing context)
 ** : "<string>$
 ** <string> can contain escaped quotation marks, but no line breaks
 */
case 91:
/* rule 91 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 278 "language2.ll"

  #ifdef C_S_H_IS_COMPILED
    yylval_param->str = strdup(yytext);
  #else
    {
    /* after whitespaces we are guaranteed to have a heading quot */
    const char *s = msc_remove_head_tail_whitespace(yytext+1);
    // s now points to heading quotation mark
    FileLineCol pos(yyget_extra(yyscanner)->msc->current_file,
                 yylloc->first_line, yylloc->first_column + unsigned(s - yytext));
    yyget_extra(yyscanner)->msc->Error.Error(pos,
         "This opening quotation mark misses its closing pair. "
         "Assuming string termination at line-end.",
         "Quoted strings cannot have line breaks. Use \'\\n\' to insert a line break.");
    /* Advance pos beyond the leading quotation mark */
    pos.col++;
    yylval_param->str = strdup((pos.Print() + (s+1)).c_str());
    }
  #endif
    return TOK_COLON_QUOTED_STRING;

	YY_BREAK
/* This is a non quoted colon-string
 ** : <string>
 ** terminated by any of: quot mark, backslash [ { or ;
 ** Honors escaping of the above via a backslash
 ** Can contain quotation marks (escaped or unescaped), but can not start with it
 */
case 92:
/* rule 92 can match eol */
YY_RULE_SETUP
#line 306 "language2.ll"

  #ifdef C_S_H_IS_COMPILED
    yylval_param->str = strdup(yytext);
  #else
    yylval_param->str = msc_process_colon_string(yytext, yylloc,
                        yyget_extra(yyscanner)->msc->current_file);
  #endif
    return TOK_COLON_STRING;

	YY_BREAK
/* A simple quoted string, that can have escaped quotation marks inside.*/
case 93:
YY_RULE_SETUP
#line 317 "language2.ll"

    yylval_param->str = strdup(yytext+1);
    yylval_param->str[strlen(yylval_param->str) - 1] = '\0';
    return TOK_QSTRING;

	YY_BREAK
/* A simple quoted string, missing a closing quotation mark */
case 94:
/* rule 94 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 324 "language2.ll"

  #ifdef C_S_H_IS_COMPILED
    yylval_param->str = strdup(yytext+1);
  #else
    {
    yylval_param->str = strdup(yytext+1);
    FileLineCol pos(yyget_extra(yyscanner)->msc->current_file,
                 yylloc->first_line, yylloc->first_column);
    yyget_extra(yyscanner)->msc->Error.Error(pos,
         "This opening quotation mark misses its closing pair. "
         "Assuming string termination at line-end.",
         "Quoted strings cannot have line breaks. Use \'\\n\' to insert a line break.");
    }
  #endif
    return TOK_QSTRING;

	YY_BREAK
/* Numbers */
case 95:
YY_RULE_SETUP
#line 342 "language2.ll"

    yylval_param->str = strdup(yytext);
    return TOK_NUMBER;

	YY_BREAK
/* Strings not ending with a dot */
case 96:
YY_RULE_SETUP
#line 348 "language2.ll"

    yylval_param->str = strdup(yytext);
    return TOK_STRING;

	YY_BREAK
/* Strings ending with a dot, not followed by a second dot */
case 97:
/* rule 97 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 354 "language2.ll"

    yylval_param->str = strdup(yytext);
    return TOK_STRING;

	YY_BREAK
/* Color definitions */
/* string+-number[,number]*/
case 98:
YY_RULE_SETUP
#line 361 "language2.ll"

    yylval_param->str = strdup(yytext);
    return TOK_COLORDEF;

	YY_BREAK
/* string,number[+-number]*/
case 99:
YY_RULE_SETUP
#line 367 "language2.ll"

    yylval_param->str = strdup(yytext);
    return TOK_COLORDEF;

	YY_BREAK
/* number,number,number[,number] */
case 100:
YY_RULE_SETUP
#line 373 "language2.ll"

    yylval_param->str = strdup(yytext);
    return TOK_COLORDEF;

	YY_BREAK
case 101:
YY_RULE_SETUP
#line 379 "language2.ll"
ECHO;
	YY_BREAK
#line 2118 "<stdout>"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 354 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 354 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 353);

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	yy_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf ,yyscanner );

	yyfree((void *) b ,yyscanner );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	int num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "yyset_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "yyset_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void yyset_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *yyget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void yyset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int yylex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */

int yylex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    yyset_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 379 "language2.ll"



/* END OF FILE */

