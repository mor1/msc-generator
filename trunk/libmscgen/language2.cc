
#line 3 "<stdout>"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart (FILE *input_file ,yyscan_t yyscanner );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void yy_delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void yy_flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void yypop_buffer_state (yyscan_t yyscanner );

static void yyensure_buffer_stack (yyscan_t yyscanner );
static void yy_load_buffer_state (yyscan_t yyscanner );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len ,yyscan_t yyscanner );

void *yyalloc (yy_size_t ,yyscan_t yyscanner );
void *yyrealloc (void *,yy_size_t ,yyscan_t yyscanner );
void yyfree (void * ,yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 128
#define YY_END_OF_BUFFER 129
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[442] =
    {   0,
        0,    0,    0,    0,  129,  128,    5,    2,    3,  120,
        4,   97,   89,   91,   88,  128,  122,  118,   92,   68,
       90,   67,  123,  123,    8,  123,    9,  123,  123,   12,
        7,    6,  123,  123,  123,  123,   10,   11,  123,   13,
       95,   96,  123,  123,  123,  123,  123,  123,  123,  123,
      123,  123,   93,  128,   94,  120,   89,   88,  128,  118,
       68,   90,    5,    1,  120,  119,  120,    4,   77,  122,
       87,   76,   58,   78,    0,  122,  122,  116,  118,  115,
      116,  118,   59,   65,   62,   69,   79,   61,   64,    0,
        0,    0,  123,  123,  123,   29,  123,  123,  123,  123,

      123,  123,  123,  123,  123,  123,  123,  123,  123,  123,
      123,  123,  123,  123,  123,  123,  123,  123,  123,  123,
      123,  123,  123,  123,  123,  123,  123,  123,  123,  123,
      123,  123,    0,  120,    0,  119,  120,   80,   82,  117,
      118,  117,   81,   84,  118,   85,   83,  119,  122,  122,
       56,   55,    0,  122,  116,  116,  116,  115,  114,  115,
      116,  116,  116,  116,   60,   71,    0,   74,   63,   73,
       70,  125,  126,  124,  124,  124,  123,  123,  123,  123,
       23,  123,   38,  123,  123,  123,  123,  123,  123,  123,
      123,  123,  123,  123,  123,   14,  123,  123,  123,  123,

      123,  123,  123,  123,  123,  123,  123,  123,  123,  123,
      123,  123,  123,  123,  123,  123,   57,  121,    0,  119,
      117,  117,  117,  117,  117,  117,  117,   86,  122,    0,
        0,  116,  116,  116,  116,  114,  116,  116,  116,  116,
      116,  116,  116,  116,    0,   66,   75,    0,  125,    0,
      126,   54,  123,  123,  123,  123,  123,  123,  123,  123,
      123,  123,  123,  123,   35,  123,   31,   30,   25,  123,
       42,  123,  123,  123,   24,  123,  123,   53,  123,   34,
      123,  123,   48,  123,  123,  123,  123,   24,  123,  121,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,

      117,  117,  127,    0,  116,  116,  116,  116,  116,  116,
       72,  125,  125,  126,  126,  123,   22,   49,  123,  123,
      123,  123,  123,  123,  123,  123,  123,  123,  123,  123,
      123,   16,  123,  123,  123,   51,   33,  123,  123,   46,
      123,  123,   22,    0,    0,    0,    0,  123,  117,  117,
      117,  117,  117,  117,    0,  127,  125,  126,  123,  123,
       32,  123,  123,  123,  123,  123,  123,  123,  123,  123,
       40,  123,  123,  123,  123,  123,   41,  123,   39,    0,
        0,  103,   99,   98,  101,  100,  123,  127,  127,  125,
      126,  123,   50,   43,  123,  123,  123,  123,  123,   44,

      123,   15,   21,   27,  123,   52,  123,  123,  102,  105,
      104,  123,  127,   36,  123,   18,  123,   17,   19,   45,
       26,   47,   28,   28,  127,  123,   20,    0,    0,    0,
        0,  112,   37,  107,  106,  110,  109,  108,  113,  111,
        0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    1,    1,    1,    1,    1,
        1,    7,    8,    9,   10,   11,    1,   12,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   14,   15,   16,
       17,   18,    1,    1,   19,   20,   21,   22,   23,   24,
       25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
       28,   35,   36,   37,   38,   39,   40,   41,   42,   28,
       43,   44,   45,    1,   28,    1,   46,   47,   48,   49,

       50,   51,   52,   53,   54,   28,   55,   56,   57,   58,
       59,   60,   28,   61,   62,   63,   64,   65,   66,   67,
       68,   28,   69,   70,   71,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[73] =
    {   0,
        1,    1,    2,    2,    1,    1,    1,    3,    3,    3,
        4,    3,    3,    1,    5,    1,    1,    1,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    5,    1,    1,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    5,    1,
        1,    1
    } ;

static yyconst flex_int16_t yy_base[465] =
    {   0,
        0,    0,   68,   78,  470, 2860,  465, 2860,  453,   69,
        0, 2860,   85, 2860,   91,  440,   99,   75, 2860,   89,
       73,  430,  106,  162,  124,  113,  120,  129,  140,  157,
      191,  217,  223,  150,  256,  249,  282,  289,  317,  229,
     2860, 2860,  382,  321,  349,  355,  364,  375,  393,  419,
      423,  432, 2860,  338, 2860,  141,  164,  268,  377,  457,
      331,  124,  340, 2860,  120, 2860,  150,    0, 2860,  197,
     2860,  326, 2860,  308,  174,  204,  236,  112,  312,  185,
      346,  454,  291,  188,  225, 2860,  270,  259, 2860,  239,
      242,  523,  296,  501,  480,  470,  537,  541,  496,  548,

      553,  566,  580,  592,  607,  611,  624,  628,  634,  639,
      643,  659,  673,  681,  686,  701,  706,  711,  719,  723,
      739,  749,  753,  767,  774,  780,  785,  798,  807,  816,
      826,  834,  204,  267,  191, 2860,  318,  234,  211,  176,
      332,  847, 2860, 2860,  839,  194,  185,  257,  272,  357,
     2860, 2860,  387,  483,  307,  858,  851,  289, 2860,  372,
      866,  911,  907,  922, 2860,  180,  173,  161, 2860, 2860,
     2860,  507,  866, 2860,  412,  423,  570,  921,  931,  938,
      847,  987,  991,  995, 1002, 1006, 1015, 1010, 1020, 1030,
     1037, 1061, 1065, 1080, 1084, 1088, 1095, 1100, 1110, 1116,

     1122, 1136, 1155, 1163, 1170, 1174, 1181, 1185, 1194, 1198,
     1208, 1215, 1220, 1234, 1248, 1259, 2860, 2860,  405,  656,
      349, 1248, 1234, 1270, 1287, 1280, 1326, 2860,  441,  452,
      560, 1338, 1345, 1384, 1391,  414, 1398, 1433, 1437, 1444,
     1448, 1483, 1495,  400,  157, 2860, 2860,  472,  574,  486,
      597, 1264, 1296, 1279, 1513, 1369, 1537, 1548, 1413, 1563,
     1567, 1572, 1580, 1301, 1354, 1586, 1407, 1590, 1606, 1613,
     1617, 1631, 1635, 1639, 1647, 1652, 1662, 1666, 1688, 1692,
     1696, 1700, 1708, 1718, 1726, 1734, 1738, 1752, 1762,  469,
     1769, 1779, 1786, 1796, 1835, 1845, 1852, 1862, 1884, 1903,

     1920,  416,  616,  690, 1930, 1942, 1978, 1988, 1992, 2000,
     2860,  542,  756,  652,  664, 1768, 1795, 1861, 2042, 2065,
     1950, 2069, 2073, 2077, 2096, 2101, 2108, 2009, 2122, 2126,
     2142, 1929, 2147, 2151, 2164, 2174, 2180, 2187, 2191, 2195,
     2201, 2207, 2217,  730,  713, 2257,  103, 2230, 2240, 2270,
     2300, 2319, 2330, 2341,  523,  790,  600,  643, 2285, 2372,
     2234, 2384, 2350, 2395, 2409, 2414, 2421, 2429, 2433, 2447,
     2451, 2457, 2474, 2478, 2482, 2494, 2501, 2510, 2505,  871,
       82,   78, 2860, 2860, 2860, 2860, 2522,  741,  960,  674,
      693, 2528, 2536, 2544, 2550, 2554, 2562, 2571, 2575, 2566,

     2582, 2591, 2598, 2602, 2608, 2618, 2625, 2631, 2860, 2860,
     2860, 2635,  724, 2641, 2645, 2649, 2658, 2662, 2668, 2675,
     2684, 2688, 2692, 2696,  767, 2701, 2709,  969, 1043,   76,
      793,   57, 2717, 2860, 2860, 2860, 2860, 2860, 2860, 2860,
     2860, 2751, 2756, 2761, 2763, 2767, 2772, 2776, 2780, 2785,
     2790, 2795, 2800, 2804, 2809, 2814, 2819, 2824, 2829, 2834,
     2839, 2844, 2849, 2854
    } ;

static yyconst flex_int16_t yy_def[465] =
    {   0,
      441,    1,    1,    1,  441,  441,  441,  441,  441,  442,
      443,  441,  441,  441,  441,  441,  441,  444,  441,  441,
      441,  441,  445,  445,  445,  445,  445,  445,  445,  445,
      445,  445,  445,  445,  445,  445,  445,  445,  445,  445,
      441,  441,   24,  445,  445,  445,  445,  445,  445,  445,
      445,  445,  441,  441,  441,  446,  441,  441,  441,  447,
      441,  441,  441,  441,  442,  441,  442,  443,  441,  441,
      441,  441,  441,  441,  441,  441,  441,  448,  444,  449,
      450,  444,  441,  441,  441,  441,  441,  441,  441,  441,
      441,  451,  445,  445,  445,  445,  445,  445,  445,  445,

      445,  445,  445,  445,  445,  445,  445,  445,  445,  445,
      445,  445,  445,  445,  445,  445,  445,  445,  445,  445,
      445,  445,  445,  445,  445,  445,  445,  445,  445,  445,
      445,  445,  441,  446,  452,  441,  446,  441,  441,  453,
      447,  454,  441,  441,  447,  441,  441,  442,  441,  441,
      441,  441,  441,  441,  448,  455,  448,  449,  441,  449,
      450,  456,  450,  457,  441,  441,  441,  441,  441,  441,
      441,  441,  441,  441,  441,  441,  445,  445,  445,  445,
      445,  445,  445,  445,  445,  445,  445,  445,  445,  445,
      445,  445,  445,  445,  445,  445,  445,  445,  445,  445,

      445,  445,  445,  445,  445,  445,  445,  445,  445,  445,
      445,  445,  445,  445,  445,  445,  441,  441,  452,  446,
      453,  458,  453,  454,  459,  454,  460,  441,  441,  441,
      441,  455,  455,  455,  461,  449,  456,  456,  456,  462,
      450,  456,  457,  448,  441,  441,  441,  441,  441,  441,
      441,  445,  445,  445,  445,  445,  445,  445,  445,  445,
      445,  445,  445,  445,  445,  445,  445,  445,  445,  445,
      445,  445,  445,  445,  445,  445,  445,  445,  445,  445,
      445,  445,  445,  445,  445,  445,  445,  445,  445,  452,
      458,  458,  458,  463,  459,  459,  459,  464,  454,  459,

      460,  453,  441,  441,  455,  455,  461,  456,  456,  462,
      441,  441,  441,  441,  441,  445,  445,  445,  445,  445,
      445,  445,  445,  445,  445,  445,  445,  445,  445,  445,
      445,  445,  445,  445,  445,  445,  445,  445,  445,  445,
      445,  445,  445,  441,  441,  451,  441,  445,  458,  458,
      463,  459,  459,  464,  441,  441,  441,  441,  445,  445,
      445,  445,  445,  445,  445,  445,  445,  445,  445,  445,
      445,  445,  445,  445,  445,  445,  445,  445,  445,  441,
      441,  441,  441,  441,  441,  441,  445,  441,  441,  441,
      441,  445,  445,  445,  445,  445,  445,  445,  445,  445,

      445,  445,  445,  445,  445,  445,  445,  445,  441,  441,
      441,  445,  441,  445,  445,  445,  445,  445,  445,  445,
      445,  445,  445,  445,  441,  445,  445,  441,  441,  346,
      441,  441,  445,  441,  441,  441,  441,  441,  441,  441,
        0,  441,  441,  441,  441,  441,  441,  441,  441,  441,
      441,  441,  441,  441,  441,  441,  441,  441,  441,  441,
      441,  441,  441,  441
    } ;

static yyconst flex_int16_t yy_nxt[2933] =
    {   0,
        6,    7,    8,    9,   10,   11,   12,   13,   14,   15,
       16,   17,   17,   18,   19,   20,   21,   22,   23,   24,
       25,   26,   27,   28,   29,   30,   29,   29,   29,   31,
       32,   33,   34,   35,   36,   37,   38,   29,   39,   29,
       40,   29,   41,    6,   42,   23,   43,   44,   26,   45,
       28,   29,   46,   29,   29,   47,   48,   33,   34,   49,
       36,   50,   51,   29,   52,   29,   40,   29,   53,   54,
       55,    6,   56,   66,  440,   57,   79,   58,   59,   80,
       81,   60,   56,   61,   62,   57,  437,   58,   59,   87,
       88,   60,   69,   61,   62,  411,   70,   70,   83,  410,

       72,   71,   70,   70,   84,   85,   86,   75,   73,   76,
       77,   77,   67,   90,   91,   90,   92,  156,   82,  386,
       90,   91,   90,   92,   66,   94,   95,   90,   91,   90,
       92,   90,   91,   90,   92,  103,   90,   91,   90,   92,
      147,   88,   96,  135,  135,  136,  101,   90,   91,   90,
       92,  104,   94,   95,  148,  157,  102,   90,   91,   90,
       92,  105,  103,   67,   90,   91,   90,   92,   96,   90,
       91,   90,   92,  101,  311,   70,   70,  104,  247,  106,
       71,  222,  102,  107,  137,  153,  153,  105,  116,  159,
      246,   97,  108,   67,   98,  218,   99,  245,   90,   91,

       90,   92,  170,  100,  166,  167,  106,  149,  150,  150,
      107,  228,   75,  109,  116,  154,  154,   97,  108,  223,
       98,  152,   99,  110,   90,   91,   90,   92,  160,  100,
       90,   91,   90,   92,  219,  111,   90,   91,   90,   92,
      109,  168,  169,  151,   75,  113,   76,   77,   77,  110,
      172,  172,  112,  173,  173,  114,   90,   91,   90,   92,
      115,   66,  111,   90,   91,   90,   92,  120,  121,  135,
      135,  136,  113,  217,  117,  122,  171,  138,  112,   70,
       70,  114,  118,  229,  229,   73,  115,  170,  119,   90,
       91,   90,   92,  159,  120,  121,   90,   91,   90,   92,

       67,  117,  122,   90,   91,   90,   92,  123,  165,  118,
      137,  126,  156,   79,  119,  127,   80,   81,  152,  124,
      135,  135,  220,  125,   90,   91,   90,   92,   90,   91,
       90,   92,  160,  141,  123,  151,   80,  142,  126,  128,
       83,   63,  127,  101,  146,  124,   84,   85,   86,  125,
      157,  162,  129,  102,  222,   82,   90,   91,   90,   92,
      163,  137,   90,   91,   90,   92,  128,  149,  150,  150,
      101,   90,   91,   90,   92,  145,  236,  106,  129,  102,
      104,  107,   90,   91,   90,   92,  109,  139,  163,  164,
      108,  155,  223,  111,  155,  230,  110,  231,  153,  153,

       90,   91,   90,   92,  106,  156,  104,  133,  107,  290,
      112,  117,  155,  109,  163,  160,  108,  155,  159,  118,
      111,  222,  110,  172,  172,  119,   90,   91,   90,   92,
       90,   91,   90,   92,  173,  173,  112,  130,  117,   90,
       91,   90,   92,  157,  123,  126,  131,   89,  219,  127,
       74,  119,  229,  229,  128,   64,  124,  160,  141,  223,
      125,   80,  142,  303,  303,  441,   63,  129,   78,  441,
      143,  123,  126,  218,  144,  441,  127,   90,   91,   90,
       92,  132,  124,  312,  312,  441,  125,   90,   91,   90,
       92,   75,  441,  129,  154,  154,   78,  314,  314,  441,

      145,  441,  441,   90,   91,   90,   92,  441,   90,   91,
       90,   92,  219,  441,  182,  248,  179,  249,  172,  172,
      441,  441,   78,  174,  174,  174,  174,  174,  174,  174,
      175,  176,  175,  178,  388,  388,  174,  174,  174,  174,
      174,  182,  179,  441,   90,   91,   90,   92,   90,   91,
       90,   92,  357,  312,  312,   90,   91,   90,   92,  178,
       90,   91,   90,   92,  441,  174,  174,  174,  230,  180,
      183,  304,  304,   90,   91,   90,   92,   90,   91,   90,
       92,  181,  248,  441,  184,  313,  313,   90,   91,   90,
       92,  174,  174,  174,  174,  180,  185,  183,  186,   90,

       91,   90,   92,  187,  250,  441,  250,  181,  315,  315,
      184,  390,  390,  188,   90,   91,   90,   92,   90,   91,
       90,   92,  185,  441,  355,  186,  356,  303,  303,  190,
      187,   90,   91,   90,   92,   90,   91,   90,   92,  189,
      188,   90,   91,   90,   92,  191,   90,   91,   90,   92,
       90,   91,   90,   92,  391,  391,  190,  193,  135,  135,
      136,  192,  358,  314,  314,  189,   90,   91,   90,   92,
      441,  250,  191,  250,  194,  315,  315,  195,  441,  196,
       90,   91,   90,   92,  193,  390,  390,  192,   90,   91,
       90,   92,  441,   90,   91,   90,   92,  441,  230,  137,

      194,  304,  304,  195,  391,  391,  196,  199,   90,   91,
       90,   92,  197,   90,   91,   90,   92,  198,   90,   91,
       90,   92,  384,  200,  172,  172,   90,   91,   90,   92,
       90,   91,   90,   92,  199,  425,  425,  383,  197,  441,
      201,  172,  172,  198,  202,  203,   90,   91,   90,   92,
      200,  413,  388,  388,  204,  441,   90,   91,   90,   92,
       90,   91,   90,   92,  248,  441,  201,  313,  313,  441,
      202,  205,  203,  206,   90,   91,   90,   92,  425,  425,
      204,   90,   91,   90,   92,  207,  208,   90,   91,   90,
       92,  441,   90,   91,   90,   92,  441,  205,  355,  441,

      206,  389,  389,  441,  209,   90,   91,   90,   92,  438,
      439,  207,  441,  208,   90,   91,   90,   92,  441,  441,
      210,  211,  441,   90,   91,   90,   92,  441,  441,  441,
      209,  441,  212,   90,   91,   90,   92,  441,  441,  441,
      213,   90,   91,   90,   92,  441,  210,  211,  180,  441,
      441,  441,  225,  140,   90,   91,   90,   92,  212,  202,
      441,  226,  441,  233,  441,  155,  213,  441,  212,  155,
      441,  162,  234,  250,  214,  250,  251,  173,  173,  441,
      163,  140,  172,  172,  441,  215,  441,  441,  409,  226,
      227,  441,  221,  155,  216,  221,  441,  441,  441,  441,

      234,  235,  441,  155,  441,  441,  155,  140,  163,  164,
      441,  155,  162,  221,  155,  226,  238,  441,  221,  155,
      441,  163,  161,  441,  155,  239,  234,  242,   90,   91,
       90,   92,  155,  161,  163,  441,  161,  155,   90,   91,
       90,   92,  441,  441,  441,   90,   91,   90,   92,  163,
      164,  441,  155,  239,  240,  155,  155,  253,  254,  155,
      441,  252,  441,  441,  161,  243,  441,  155,  355,  441,
      155,  389,  389,  155,  441,  163,  434,  155,  155,  239,
      172,  172,  232,  441,  253,  254,  441,  252,  155,  441,
      161,  441,  441,  244,   90,   91,   90,   92,   90,   91,

       90,   92,   90,   91,   90,   92,  441,  255,  441,   90,
       91,   90,   92,   90,   91,   90,   92,   90,   91,   90,
       92,  441,   90,   91,   90,   92,  258,   90,   91,   90,
       92,  256,  257,  441,  255,  259,  260,   90,   91,   90,
       92,  262,  441,  441,   90,   91,   90,   92,  441,  441,
      261,  264,  435,  258,  172,  172,  263,  256,  257,  265,
      436,  441,  259,  260,  441,  441,  441,  262,   90,   91,
       90,   92,   90,   91,   90,   92,  261,  441,  264,  266,
      441,  441,  263,  441,  441,  441,  265,   90,   91,   90,
       92,   90,   91,   90,   92,   90,   91,   90,   92,  441,

      441,  267,   90,   91,   90,   92,  266,   90,   91,   90,
       92,  441,  269,  441,  441,  441,  268,   90,   91,   90,
       92,  441,  271,   90,   91,   90,   92,  267,  270,   90,
       91,   90,   92,  441,  272,  441,  441,  441,  269,  441,
      274,  441,  268,   90,   91,   90,   92,  441,  441,  271,
      273,  441,  441,  441,  270,  441,  441,  441,  275,  441,
      441,  272,   90,   91,   90,   92,  441,  274,  441,  441,
       90,   91,   90,   92,  441,  441,  273,   90,   91,   90,
       92,   90,   91,   90,   92,  275,  276,  277,   90,   91,
       90,   92,   90,   91,   90,   92,  441,  441,  441,  279,

      441,   90,   91,   90,   92,   90,   91,   90,   92,  441,
      278,  441,  276,  282,  277,   90,   91,   90,   92,  441,
      280,  281,   90,   91,   90,   92,  279,   90,   91,   90,
       92,  441,  441,  441,  283,  441,  278,  284,  286,  441,
      282,   90,   91,   90,   92,  441,  280,  281,  221,  441,
      441,  285,  441,  292,  254,   90,   91,   90,   92,  221,
      283,  441,  293,  284,  441,  286,   90,   91,   90,   92,
      275,   90,   91,   90,   92,  225,  221,  285,  441,  441,
      441,  287,  441,  441,  226,  225,   90,   91,   90,   92,
      293,  294,  296,  221,  226,  285,  221,  288,  224,  441,

      441,  297,  221,   90,   91,   90,   92,  317,   90,   91,
       90,   92,  226,  227,  221,  221,  293,  441,  221,  441,
      441,  289,  226,  227,  441,  221,  441,  329,  221,  297,
      298,  300,  221,  317,  316,  221,  221,  224,  226,  441,
      224,  221,  441,  233,  441,  441,  221,  441,  226,  155,
      233,  221,  234,  221,  329,  297,  155,  441,  291,  234,
      316,   90,   91,   90,   92,  441,  441,  441,  224,  301,
      441,  221,  441,  441,  221,  441,   90,   91,   90,   92,
      234,  235,  441,  155,  441,  441,  155,  234,  235,  233,
      155,  320,  221,  155,  224,  155,  306,  302,  234,  441,

      441,  441,  155,  238,  155,  232,  234,  441,  441,  161,
      441,  155,  239,  234,   90,   91,   90,   92,  320,  441,
       90,   91,   90,   92,  441,  441,  234,  235,  441,  155,
      441,  441,  155,  232,  307,  441,  155,  441,  238,  155,
      239,  240,  238,  155,  161,  323,  155,  239,  161,  309,
      155,  239,  234,  162,  441,  161,  441,  155,  237,  232,
      441,  441,  163,  441,  155,  441,  239,  441,  441,  232,
      441,  323,  441,  441,  441,  239,  240,  441,  155,  239,
      240,  155,  155,  441,  441,  155,  237,  310,  238,  155,
      163,  164,  155,  155,  161,  441,  155,  239,  441,  155,

      242,  239,  441,  155,  232,  239,  161,  441,  232,  161,
      155,  441,  237,  441,  155,  305,  163,  441,  441,  155,
       90,   91,   90,   92,  441,  239,  240,  441,  155,  441,
      441,  155,  441,  441,  441,  318,  441,  161,  243,  441,
      155,  319,  441,  155,   90,   91,   90,   92,  441,  155,
      441,  239,  441,  441,  232,   90,   91,   90,   92,  321,
      441,  155,  318,  161,  441,  441,  244,  319,  441,  441,
       90,   91,   90,   92,   90,   91,   90,   92,  441,   90,
       91,   90,   92,  441,  322,  324,  321,   90,   91,   90,
       92,  441,  325,   90,   91,   90,   92,   90,   91,   90,

       92,  441,  441,  326,  327,  441,  330,  441,  441,  441,
      322,  328,  324,   90,   91,   90,   92,  441,  441,  325,
       90,   91,   90,   92,   90,   91,   90,   92,  441,  326,
      327,  331,  441,  330,  441,  441,  441,  328,   90,   91,
       90,   92,   90,   91,   90,   92,   90,   91,   90,   92,
      441,  441,  441,  332,   90,   91,   90,   92,  331,   90,
       91,   90,   92,  441,  333,  441,  441,  441,  334,   90,
       91,   90,   92,   90,   91,   90,   92,  441,  441,  441,
      332,  441,  441,  441,  336,  441,  441,  441,  335,  441,
      333,  441,  441,  441,  334,   90,   91,   90,   92,   90,

       91,   90,   92,   90,   91,   90,   92,   90,   91,   90,
       92,  336,  441,  441,  335,   90,   91,   90,   92,  441,
      441,  441,  338,  441,  337,   90,   91,   90,   92,  441,
      441,  441,  339,   90,   91,   90,   92,  441,  441,  441,
      340,   90,   91,   90,   92,   90,   91,   90,   92,  338,
      337,  441,  341,  441,  342,  441,  441,  441,  339,  344,
       91,  345,  346,  441,  441,  441,  317,  340,  347,   90,
       91,   90,   92,  441,  292,   90,   91,   90,   92,  341,
      221,  342,  441,  293,  292,  441,  359,  441,  341,  441,
      221,  292,  343,  293,  441,  441,  441,  221,  441,  441,

      293,  350,   90,   91,   90,   92,  441,  221,  441,  441,
      291,  293,  294,  359,  221,  348,  441,  221,  441,  441,
      441,  293,  294,  441,  221,  441,  441,  221,  293,  294,
      441,  221,  441,  441,  221,  221,  441,  293,  291,  351,
      296,  221,  441,  441,  221,  221,  224,  293,  441,  297,
      296,  441,  221,  441,  293,  441,  224,  296,  441,  297,
      441,  441,  221,  224,  291,  441,  297,  353,   90,   91,
       90,   92,  441,  224,  441,  441,  295,  297,  298,  441,
      221,  441,  441,  221,  441,  441,  441,  297,  298,  225,
      221,  441,  441,  221,  297,  298,  441,  221,  226,  441,

      221,  221,  441,  297,  295,  354,  291,  221,  296,  441,
      221,  221,  441,  297,  224,  441,  291,  297,  221,  441,
      297,  441,  441,  291,  441,  300,  226,  227,  221,  221,
      295,  224,  221,  349,  224,  233,   90,   91,   90,   92,
      441,  155,  441,  441,  234,  297,  298,  233,  221,  441,
      221,  221,  226,  155,  441,  221,  234,   90,   91,   90,
       92,  441,  224,  301,  441,  221,  441,  441,  221,  221,
      441,  297,  234,  235,  291,  155,  441,  441,  155,  441,
      441,  362,  441,  306,  234,  235,  221,  155,  224,  155,
      155,  302,  232,  238,  441,  441,  155,  238,  234,  161,

      441,  441,  239,  161,  441,  309,  239,  362,  155,  441,
      234,  161,  441,  441,  237,  441,   90,   91,   90,   92,
      232,  307,  441,  155,  441,  441,  155,  441,  441,  441,
      239,  240,  441,  155,  239,  240,  155,  155,  441,  441,
      155,  369,  237,  310,  155,  155,  232,  441,  155,   90,
       91,   90,   92,  441,  155,  441,  239,  441,  155,  232,
      239,  441,  441,  232,  360,  441,  155,  369,  237,  441,
      441,  305,   90,   91,   90,   92,   90,   91,   90,   92,
       90,   91,   90,   92,   90,   91,   90,   92,  441,  441,
      441,  360,  441,  441,  441,  363,  441,  441,  441,  361,

      441,  441,  364,   90,   91,   90,   92,  441,   90,   91,
       90,   92,  365,  441,  366,   90,   91,   90,   92,  441,
      441,  441,  363,  441,  441,  361,  441,  441,  364,   90,
       91,   90,   92,   90,   91,   90,   92,  441,  365,  441,
      441,  366,  367,  441,  368,  441,  441,  441,  371,   90,
       91,   90,   92,  370,   90,   91,   90,   92,   90,   91,
       90,   92,  441,  441,  441,  373,  372,  441,  367,  441,
      368,   90,   91,   90,   92,  371,  441,  441,  441,  370,
      374,   90,   91,   90,   92,  441,  375,   90,   91,   90,
       92,  441,  373,  372,   90,   91,   90,   92,   90,   91,

       90,   92,   90,   91,   90,   92,  374,  441,   90,   91,
       90,   92,  441,  375,   90,   91,   90,   92,  441,  441,
      377,  378,  441,  376,   90,   91,  380,   92,  441,  379,
      441,  441,  441,  381,  382,  441,  441,   90,   91,   90,
       92,   90,   91,   90,   92,  292,  377,  441,  378,  376,
      378,  221,  441,  441,  293,  441,  379,  174,  174,  174,
      174,  174,  174,  174,  175,  176,  175,  385,  441,  441,
      174,  174,  174,  174,  174,  292,  441,  387,  441,  441,
      441,  221,  293,  294,  293,  221,  441,  441,  221,  441,
      441,  441,   90,   91,   90,   92,  441,  441,  441,  174,

      174,  174,  441,  441,  441,  350,  221,  441,  293,  441,
      441,  221,  293,  294,  291,  221,  441,  441,  221,  441,
      441,  392,  441,  441,  296,  174,  174,  174,  174,  441,
      224,  441,  441,  297,  441,  296,  221,  441,  293,  441,
      441,  224,  291,  351,  297,  221,  353,  392,  221,  441,
      441,  441,  224,  441,  441,  295,  441,   90,   91,   90,
       92,  297,  298,  441,  221,  441,  221,  221,  291,  441,
      441,  441,  297,  298,  441,  221,  441,  441,  221,   90,
       91,   90,   92,  295,  354,  221,  221,  297,  395,  221,
      291,   90,   91,   90,   92,  441,  221,  441,  297,  441,

      441,  291,   90,   91,   90,   92,  441,  221,  393,  295,
      441,  441,  349,  441,  395,  441,   90,   91,   90,   92,
      394,   90,   91,   90,   92,  441,  441,  396,   90,   91,
       90,   92,  441,  441,  393,  397,   90,   91,   90,   92,
       90,   91,   90,   92,  441,  441,  394,  398,  441,  441,
      399,  400,  441,  396,   90,   91,   90,   92,   90,   91,
       90,   92,  397,  441,   90,   91,   90,   92,  441,  401,
      441,  402,  441,  398,  441,  441,  399,  441,  400,  403,
      441,   90,   91,   90,   92,   90,   91,   90,   92,   90,
       91,   90,   92,  441,  441,  401,  441,  441,  402,  441,

      405,   90,   91,   90,   92,  441,  403,  404,   90,   91,
       90,   92,   90,   91,   90,   92,  406,   90,   91,   90,
       92,  441,  441,  407,  441,  441,  441,  405,  408,   90,
       91,   90,   92,  404,  441,   90,   91,   90,   92,  441,
      408,  441,  406,   90,   91,   90,   92,  441,  441,  407,
      414,   90,   91,   90,   92,  408,  441,   90,   91,   90,
       92,   90,   91,   90,   92,  441,  441,  412,  415,   90,
       91,   90,   92,   90,   91,   90,   92,  414,   90,   91,
       90,   92,   90,   91,   90,   92,  417,  441,  416,   90,
       91,   90,   92,  418,  441,  415,  441,  419,   90,   91,

       90,   92,  441,  441,  420,   90,   91,   90,   92,   90,
       91,   90,   92,  417,  416,   90,   91,   90,   92,  441,
      418,  441,  441,  441,  419,   90,   91,   90,   92,  441,
      441,  420,   90,   91,   90,   92,  441,  421,   90,   91,
       90,   92,   90,   91,   90,   92,  441,  422,   90,   91,
       90,   92,   90,   91,   90,   92,   90,   91,   90,   92,
      423,  441,  441,  421,  423,   90,   91,   90,   92,   90,
       91,   90,   92,  441,  422,   90,   91,   90,   92,  441,
      441,  426,   90,   91,   90,   92,  423,  441,  441,  427,
      424,   90,   91,   90,   92,   90,   91,   90,   92,   90,

       91,   90,   92,  428,   91,  429,  430,  426,   90,   91,
       90,   92,  431,  432,  441,  427,   90,   91,   90,   92,
      441,  441,  441,  433,   90,   91,   90,   92,  441,  441,
      441,  441,  441,  441,  441,  441,  441,  441,  441,  441,
      441,  441,  441,  441,  441,  441,  441,  441,  441,  441,
      433,   65,  441,   65,   65,   65,   68,  441,   68,   68,
       68,   78,   78,   78,   78,   93,   93,  134,  134,  134,
      134,  134,  140,  140,  140,  140,  155,  155,  155,  155,
      158,  441,  158,  158,  158,  161,  161,  161,  161,  161,
      177,  177,  177,  441,  177,  135,  135,  135,  135,  135,

      221,  221,  221,  221,  224,  224,  224,  224,  224,  232,
      232,  232,  232,  232,  237,  237,  237,  237,  237,  241,
      241,  241,  241,  241,  291,  291,  291,  291,  291,  295,
      295,  295,  295,  295,  299,  299,  299,  299,  299,  305,
      305,  305,  305,  305,  308,  308,  308,  308,  308,  349,
      349,  349,  349,  349,  352,  352,  352,  352,  352,    5,
      441,  441,  441,  441,  441,  441,  441,  441,  441,  441,
      441,  441,  441,  441,  441,  441,  441,  441,  441,  441,
      441,  441,  441,  441,  441,  441,  441,  441,  441,  441,
      441,  441,  441,  441,  441,  441,  441,  441,  441,  441,

      441,  441,  441,  441,  441,  441,  441,  441,  441,  441,
      441,  441,  441,  441,  441,  441,  441,  441,  441,  441,
      441,  441,  441,  441,  441,  441,  441,  441,  441,  441,
      441,  441
    } ;

static yyconst flex_int16_t yy_chk[2933] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    3,   10,  432,    3,   18,    3,    3,   18,
       18,    3,    4,    3,    3,    4,  430,    4,    4,   21,
       21,    4,   13,    4,    4,  382,   13,   13,   20,  381,

       15,   13,   15,   15,   20,   20,   20,   17,   15,   17,
       17,   17,   10,   23,   23,   23,   23,   78,   18,  347,
       26,   26,   26,   26,   65,   23,   23,   27,   27,   27,
       27,   25,   25,   25,   25,   26,   28,   28,   28,   28,
       62,   62,   23,   56,   56,   56,   25,   29,   29,   29,
       29,   27,   23,   23,   67,   78,   25,   34,   34,   34,
       34,   28,   26,   65,   30,   30,   30,   30,   23,   24,
       24,   24,   24,   25,  245,   57,   57,   27,  168,   30,
       57,  140,   25,   30,   56,   75,   75,   28,   34,   80,
      167,   24,   30,   67,   24,  135,   24,  166,   31,   31,

       31,   31,  147,   24,   84,   84,   30,   70,   70,   70,
       30,  146,   76,   31,   34,   76,   76,   24,   30,  140,
       24,  139,   24,   31,   32,   32,   32,   32,   80,   24,
       33,   33,   33,   33,  135,   32,   40,   40,   40,   40,
       31,   85,   85,  138,   77,   33,   77,   77,   77,   31,
       90,   90,   32,   91,   91,   33,   36,   36,   36,   36,
       33,  148,   32,   35,   35,   35,   35,   36,   36,  134,
      134,  134,   33,  133,   35,   36,   88,   58,   32,   58,
       58,   33,   35,  149,  149,   58,   33,   87,   35,   37,
       37,   37,   37,  158,   36,   36,   38,   38,   38,   38,

      148,   35,   36,   93,   93,   93,   93,   37,   83,   35,
      134,   38,  155,   79,   35,   38,   79,   79,   74,   37,
      137,  137,  137,   37,   39,   39,   39,   39,   44,   44,
       44,   44,  158,  141,   37,   72,  141,  141,   38,   39,
       61,   63,   38,   44,   61,   37,   61,   61,   61,   37,
      155,   81,   39,   44,  221,   79,   45,   45,   45,   45,
       81,  137,   46,   46,   46,   46,   39,  150,  150,  150,
       44,   47,   47,   47,   47,  141,  160,   46,   39,   44,
       45,   46,   48,   48,   48,   48,   47,   59,   81,   81,
       46,   81,  221,   48,   81,  153,   47,  153,  153,  153,

       49,   49,   49,   49,   46,  244,   45,   54,   46,  219,
       48,   49,   81,   47,   81,  160,   46,   81,  236,   49,
       48,  302,   47,  175,  175,   49,   50,   50,   50,   50,
       51,   51,   51,   51,  176,  176,   48,   43,   49,   52,
       52,   52,   52,  244,   50,   51,   49,   22,  219,   51,
       16,   49,  229,  229,   52,    9,   50,  236,   60,  302,
       50,   60,   60,  230,  230,   82,    7,   52,   82,    5,
       60,   50,   51,  290,   60,    0,   51,   96,   96,   96,
       96,   52,   50,  248,  248,    0,   50,   95,   95,   95,
       95,  154,    0,   52,  154,  154,   82,  250,  250,   82,

       60,    0,   82,   99,   99,   99,   99,    0,   94,   94,
       94,   94,  290,    0,   99,  172,   95,  172,  172,  172,
       82,    0,   82,   92,   92,   92,   92,   92,   92,   92,
       92,   92,   92,   94,  355,  355,   92,   92,   92,   92,
       92,   99,   95,    0,   97,   97,   97,   97,   98,   98,
       98,   98,  312,  312,  312,  100,  100,  100,  100,   94,
      101,  101,  101,  101,    0,   92,   92,   92,  231,   97,
      100,  231,  231,  102,  102,  102,  102,  177,  177,  177,
      177,   98,  249,    0,  101,  249,  249,  103,  103,  103,
      103,   92,   92,   92,   92,   97,  102,  100,  103,  104,

      104,  104,  104,  103,  251,    0,  251,   98,  251,  251,
      101,  357,  357,  104,  105,  105,  105,  105,  106,  106,
      106,  106,  102,    0,  303,  103,  303,  303,  303,  106,
      103,  107,  107,  107,  107,  108,  108,  108,  108,  105,
      104,  109,  109,  109,  109,  107,  110,  110,  110,  110,
      111,  111,  111,  111,  358,  358,  106,  109,  220,  220,
      220,  108,  314,  314,  314,  105,  112,  112,  112,  112,
        0,  315,  107,  315,  110,  315,  315,  111,    0,  112,
      113,  113,  113,  113,  109,  390,  390,  108,  114,  114,
      114,  114,    0,  115,  115,  115,  115,    0,  304,  220,

      110,  304,  304,  111,  391,  391,  112,  115,  116,  116,
      116,  116,  113,  117,  117,  117,  117,  114,  118,  118,
      118,  118,  345,  116,  345,  345,  119,  119,  119,  119,
      120,  120,  120,  120,  115,  413,  413,  344,  113,    0,
      117,  344,  344,  114,  118,  119,  121,  121,  121,  121,
      116,  388,  388,  388,  120,    0,  122,  122,  122,  122,
      123,  123,  123,  123,  313,    0,  117,  313,  313,    0,
      118,  121,  119,  122,  124,  124,  124,  124,  425,  425,
      120,  125,  125,  125,  125,  123,  124,  126,  126,  126,
      126,    0,  127,  127,  127,  127,    0,  121,  356,    0,

      122,  356,  356,    0,  125,  128,  128,  128,  128,  431,
      431,  123,    0,  124,  129,  129,  129,  129,    0,    0,
      126,  127,    0,  130,  130,  130,  130,    0,    0,    0,
      125,    0,  128,  131,  131,  131,  131,    0,    0,    0,
      129,  132,  132,  132,  132,    0,  126,  127,  130,    0,
      145,    0,  142,  145,  181,  181,  181,  181,  128,  131,
        0,  142,  157,  156,    0,  157,  129,    0,  132,  156,
        0,  161,  156,  173,  130,  173,  173,  173,  173,    0,
      161,  145,  380,  380,  145,  131,    0,  145,  380,  142,
      142,    0,  142,  157,  132,  142,  157,    0,    0,  157,

      156,  156,    0,  156,    0,  145,  156,  145,  161,  161,
        0,  161,  163,  142,  161,  142,  162,  157,  142,  157,
        0,  163,  162,    0,  156,  162,  156,  164,  178,  178,
      178,  178,  161,  164,  161,    0,  164,  161,  179,  179,
      179,  179,    0,    0,    0,  180,  180,  180,  180,  163,
      163,    0,  163,  162,  162,  163,  162,  179,  180,  162,
        0,  178,    0,    0,  164,  164,    0,  164,  389,    0,
      164,  389,  389,  163,    0,  163,  428,  162,  163,  162,
      428,  428,  162,    0,  179,  180,    0,  178,  164,    0,
      164,    0,    0,  164,  182,  182,  182,  182,  183,  183,

      183,  183,  184,  184,  184,  184,    0,  182,    0,  185,
      185,  185,  185,  186,  186,  186,  186,  188,  188,  188,
      188,    0,  187,  187,  187,  187,  186,  189,  189,  189,
      189,  184,  185,    0,  182,  187,  187,  190,  190,  190,
      190,  188,    0,    0,  191,  191,  191,  191,    0,    0,
      187,  190,  429,  186,  429,  429,  189,  184,  185,  191,
      429,    0,  187,  187,    0,    0,    0,  188,  192,  192,
      192,  192,  193,  193,  193,  193,  187,    0,  190,  192,
        0,    0,  189,    0,    0,    0,  191,  194,  194,  194,
      194,  195,  195,  195,  195,  196,  196,  196,  196,    0,

        0,  193,  197,  197,  197,  197,  192,  198,  198,  198,
      198,    0,  195,    0,    0,    0,  194,  199,  199,  199,
      199,    0,  198,  200,  200,  200,  200,  193,  197,  201,
      201,  201,  201,    0,  199,    0,    0,    0,  195,    0,
      201,    0,  194,  202,  202,  202,  202,    0,    0,  198,
      200,    0,    0,    0,  197,    0,    0,    0,  202,    0,
        0,  199,  203,  203,  203,  203,    0,  201,    0,    0,
      204,  204,  204,  204,    0,    0,  200,  205,  205,  205,
      205,  206,  206,  206,  206,  202,  203,  204,  207,  207,
      207,  207,  208,  208,  208,  208,    0,    0,    0,  206,

        0,  209,  209,  209,  209,  210,  210,  210,  210,    0,
      205,    0,  203,  209,  204,  211,  211,  211,  211,    0,
      207,  208,  212,  212,  212,  212,  206,  213,  213,  213,
      213,    0,    0,    0,  210,    0,  205,  211,  213,    0,
      209,  214,  214,  214,  214,  223,  207,  208,  223,    0,
        0,  212,    0,  222,  214,  215,  215,  215,  215,  222,
      210,    0,  222,  211,    0,  213,  216,  216,  216,  216,
      215,  252,  252,  252,  252,  224,  223,  212,    0,  223,
        0,  214,  223,    0,  224,  226,  254,  254,  254,  254,
      222,  222,  225,  222,  226,  216,  222,  215,  225,    0,

      223,  225,  223,  253,  253,  253,  253,  254,  264,  264,
      264,  264,  224,  224,  222,  224,  222,    0,  224,    0,
        0,  216,  226,  226,    0,  226,    0,  264,  226,  225,
      225,  227,  225,  254,  253,  225,  224,  227,  224,    0,
      227,  224,    0,  232,    0,    0,  226,    0,  226,  232,
      233,  226,  232,  225,  264,  225,  233,    0,  225,  233,
      253,  265,  265,  265,  265,    0,    0,    0,  227,  227,
        0,  227,    0,    0,  227,    0,  256,  256,  256,  256,
      232,  232,    0,  232,    0,    0,  232,  233,  233,  234,
      233,  256,  227,  233,  227,  234,  235,  227,  234,    0,

        0,    0,  235,  237,  232,  235,  232,    0,    0,  237,
        0,  233,  237,  233,  267,  267,  267,  267,  256,    0,
      259,  259,  259,  259,    0,    0,  234,  234,    0,  234,
        0,    0,  234,  235,  235,    0,  235,    0,  238,  235,
      237,  237,  239,  237,  238,  259,  237,  238,  239,  240,
      234,  239,  234,  241,    0,  240,    0,  235,  240,  235,
        0,    0,  241,    0,  237,    0,  237,    0,    0,  237,
        0,  259,    0,    0,    0,  238,  238,    0,  238,  239,
      239,  238,  239,    0,    0,  239,  240,  240,  242,  240,
      241,  241,  240,  241,  242,    0,  241,  242,    0,  238,

      243,  238,    0,  239,  238,  239,  243,    0,  239,  243,
      240,    0,  240,    0,  241,  240,  241,    0,    0,  241,
      255,  255,  255,  255,    0,  242,  242,    0,  242,    0,
        0,  242,    0,    0,    0,  255,    0,  243,  243,    0,
      243,  255,    0,  243,  257,  257,  257,  257,    0,  242,
        0,  242,    0,    0,  242,  258,  258,  258,  258,  257,
        0,  243,  255,  243,    0,    0,  243,  255,    0,    0,
      260,  260,  260,  260,  261,  261,  261,  261,    0,  262,
      262,  262,  262,    0,  258,  260,  257,  263,  263,  263,
      263,    0,  261,  266,  266,  266,  266,  268,  268,  268,

      268,    0,    0,  261,  262,    0,  266,    0,    0,    0,
      258,  263,  260,  269,  269,  269,  269,    0,    0,  261,
      270,  270,  270,  270,  271,  271,  271,  271,    0,  261,
      262,  270,    0,  266,    0,    0,    0,  263,  272,  272,
      272,  272,  273,  273,  273,  273,  274,  274,  274,  274,
        0,    0,    0,  272,  275,  275,  275,  275,  270,  276,
      276,  276,  276,    0,  273,    0,    0,    0,  274,  277,
      277,  277,  277,  278,  278,  278,  278,    0,    0,    0,
      272,    0,    0,    0,  277,    0,    0,    0,  276,    0,
      273,    0,    0,    0,  274,  279,  279,  279,  279,  280,

      280,  280,  280,  281,  281,  281,  281,  282,  282,  282,
      282,  277,    0,    0,  276,  283,  283,  283,  283,    0,
        0,    0,  281,    0,  279,  284,  284,  284,  284,    0,
        0,    0,  282,  285,  285,  285,  285,    0,    0,    0,
      284,  286,  286,  286,  286,  287,  287,  287,  287,  281,
      279,    0,  285,    0,  286,    0,    0,    0,  282,  288,
      288,  288,  288,    0,    0,    0,  287,  284,  288,  289,
      289,  289,  289,    0,  291,  316,  316,  316,  316,  285,
      291,  286,    0,  291,  292,    0,  316,    0,  289,    0,
      292,  293,  287,  292,    0,    0,    0,  293,    0,    0,

      293,  294,  317,  317,  317,  317,    0,  294,    0,    0,
      294,  291,  291,  316,  291,  289,    0,  291,    0,    0,
        0,  292,  292,    0,  292,    0,    0,  292,  293,  293,
        0,  293,    0,    0,  293,  291,    0,  291,  294,  294,
      295,  294,    0,    0,  294,  292,  295,  292,    0,  295,
      296,    0,  293,    0,  293,    0,  296,  297,    0,  296,
        0,    0,  294,  297,  294,    0,  297,  298,  318,  318,
      318,  318,    0,  298,    0,    0,  298,  295,  295,    0,
      295,    0,    0,  295,    0,    0,    0,  296,  296,  299,
      296,    0,    0,  296,  297,  297,    0,  297,  299,    0,

      297,  295,    0,  295,  298,  298,  295,  298,  300,    0,
      298,  296,    0,  296,  300,    0,  296,  300,  297,    0,
      297,    0,    0,  297,    0,  301,  299,  299,  298,  299,
      298,  301,  299,  298,  301,  305,  332,  332,  332,  332,
        0,  305,    0,    0,  305,  300,  300,  306,  300,    0,
      299,  300,  299,  306,    0,  299,  306,  321,  321,  321,
      321,    0,  301,  301,    0,  301,    0,    0,  301,  300,
        0,  300,  305,  305,  300,  305,    0,    0,  305,    0,
        0,  321,    0,  307,  306,  306,  301,  306,  301,  307,
      306,  301,  307,  308,    0,    0,  305,  309,  305,  308,

        0,    0,  308,  309,    0,  310,  309,  321,  306,    0,
      306,  310,    0,    0,  310,    0,  328,  328,  328,  328,
      307,  307,    0,  307,    0,    0,  307,    0,    0,    0,
      308,  308,    0,  308,  309,  309,  308,  309,    0,    0,
      309,  328,  310,  310,  307,  310,  307,    0,  310,  319,
      319,  319,  319,    0,  308,    0,  308,    0,  309,  308,
      309,    0,    0,  309,  319,    0,  310,  328,  310,    0,
        0,  310,  320,  320,  320,  320,  322,  322,  322,  322,
      323,  323,  323,  323,  324,  324,  324,  324,    0,    0,
        0,  319,    0,    0,    0,  322,    0,    0,    0,  320,

        0,    0,  323,  325,  325,  325,  325,    0,  326,  326,
      326,  326,  324,    0,  325,  327,  327,  327,  327,    0,
        0,    0,  322,    0,    0,  320,    0,    0,  323,  329,
      329,  329,  329,  330,  330,  330,  330,    0,  324,    0,
        0,  325,  326,    0,  327,    0,    0,    0,  330,  331,
      331,  331,  331,  329,  333,  333,  333,  333,  334,  334,
      334,  334,    0,    0,    0,  333,  331,    0,  326,    0,
      327,  335,  335,  335,  335,  330,    0,    0,    0,  329,
      334,  336,  336,  336,  336,    0,  335,  337,  337,  337,
      337,    0,  333,  331,  338,  338,  338,  338,  339,  339,

      339,  339,  340,  340,  340,  340,  334,    0,  341,  341,
      341,  341,    0,  335,  342,  342,  342,  342,    0,    0,
      339,  341,    0,  338,  343,  343,  343,  343,    0,  342,
        0,    0,    0,  343,  343,    0,    0,  348,  348,  348,
      348,  361,  361,  361,  361,  349,  339,    0,  341,  338,
      348,  349,    0,    0,  349,    0,  342,  346,  346,  346,
      346,  346,  346,  346,  346,  346,  346,  346,    0,    0,
      346,  346,  346,  346,  346,  350,    0,  348,    0,    0,
        0,  350,  349,  349,  350,  349,    0,    0,  349,    0,
        0,    0,  359,  359,  359,  359,    0,    0,    0,  346,

      346,  346,    0,    0,    0,  351,  349,    0,  349,    0,
        0,  351,  350,  350,  351,  350,    0,    0,  350,    0,
        0,  359,    0,    0,  352,  346,  346,  346,  346,    0,
      352,    0,    0,  352,    0,  353,  350,    0,  350,    0,
        0,  353,  351,  351,  353,  351,  354,  359,  351,    0,
        0,    0,  354,    0,    0,  354,    0,  363,  363,  363,
      363,  352,  352,    0,  352,    0,  351,  352,  351,    0,
        0,    0,  353,  353,    0,  353,    0,    0,  353,  360,
      360,  360,  360,  354,  354,  352,  354,  352,  363,  354,
      352,  362,  362,  362,  362,    0,  353,    0,  353,    0,

        0,  353,  364,  364,  364,  364,    0,  354,  360,  354,
        0,    0,  354,    0,  363,    0,  365,  365,  365,  365,
      362,  366,  366,  366,  366,    0,    0,  364,  367,  367,
      367,  367,    0,    0,  360,  365,  368,  368,  368,  368,
      369,  369,  369,  369,    0,    0,  362,  366,    0,    0,
      367,  368,    0,  364,  370,  370,  370,  370,  371,  371,
      371,  371,  365,    0,  372,  372,  372,  372,    0,  369,
        0,  370,    0,  366,    0,    0,  367,    0,  368,  372,
        0,  373,  373,  373,  373,  374,  374,  374,  374,  375,
      375,  375,  375,    0,    0,  369,    0,    0,  370,    0,

      374,  376,  376,  376,  376,    0,  372,  373,  377,  377,
      377,  377,  379,  379,  379,  379,  375,  378,  378,  378,
      378,    0,    0,  376,    0,    0,    0,  374,  378,  387,
      387,  387,  387,  373,    0,  392,  392,  392,  392,    0,
      387,    0,  375,  393,  393,  393,  393,    0,    0,  376,
      392,  394,  394,  394,  394,  378,    0,  395,  395,  395,
      395,  396,  396,  396,  396,    0,    0,  387,  395,  397,
      397,  397,  397,  400,  400,  400,  400,  392,  398,  398,
      398,  398,  399,  399,  399,  399,  397,    0,  396,  401,
      401,  401,  401,  398,    0,  395,    0,  399,  402,  402,

      402,  402,    0,    0,  401,  403,  403,  403,  403,  404,
      404,  404,  404,  397,  396,  405,  405,  405,  405,    0,
      398,    0,    0,    0,  399,  406,  406,  406,  406,    0,
        0,  401,  407,  407,  407,  407,    0,  405,  408,  408,
      408,  408,  412,  412,  412,  412,    0,  407,  414,  414,
      414,  414,  415,  415,  415,  415,  416,  416,  416,  416,
      408,    0,    0,  405,  412,  417,  417,  417,  417,  418,
      418,  418,  418,    0,  407,  419,  419,  419,  419,    0,
        0,  415,  420,  420,  420,  420,  408,    0,    0,  417,
      412,  421,  421,  421,  421,  422,  422,  422,  422,  423,

      423,  423,  423,  424,  424,  424,  424,  415,  426,  426,
      426,  426,  424,  424,    0,  417,  427,  427,  427,  427,
        0,    0,    0,  426,  433,  433,  433,  433,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      426,  442,    0,  442,  442,  442,  443,    0,  443,  443,
      443,  444,  444,  444,  444,  445,  445,  446,  446,  446,
      446,  446,  447,  447,  447,  447,  448,  448,  448,  448,
      449,    0,  449,  449,  449,  450,  450,  450,  450,  450,
      451,  451,  451,    0,  451,  452,  452,  452,  452,  452,

      453,  453,  453,  453,  454,  454,  454,  454,  454,  455,
      455,  455,  455,  455,  456,  456,  456,  456,  456,  457,
      457,  457,  457,  457,  458,  458,  458,  458,  458,  459,
      459,  459,  459,  459,  460,  460,  460,  460,  460,  461,
      461,  461,  461,  461,  462,  462,  462,  462,  462,  463,
      463,  463,  463,  463,  464,  464,  464,  464,  464,  441,
      441,  441,  441,  441,  441,  441,  441,  441,  441,  441,
      441,  441,  441,  441,  441,  441,  441,  441,  441,  441,
      441,  441,  441,  441,  441,  441,  441,  441,  441,  441,
      441,  441,  441,  441,  441,  441,  441,  441,  441,  441,

      441,  441,  441,  441,  441,  441,  441,  441,  441,  441,
      441,  441,  441,  441,  441,  441,  441,  441,  441,  441,
      441,  441,  441,  441,  441,  441,  441,  441,  441,  441,
      441,  441
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "language2.ll"

#line 6 "language2.ll"
    /*
        This file is part of Msc-generator.
        Copyright 2008,2009,2010,2011,2012,2013,2014 Zoltan Turanyi
        Distributed under GNU Affero General Public License.

        Msc-generator is free software: you can redistribute it and/or modify
        it under the terms of the GNU Affero General Public License as published by
        the Free Software Foundation, either version 3 of the License, or
        (at your option) any later version.

        Msc-generator is distributed in the hope that it will be useful,
        but WITHOUT ANY WARRANTY; without even the implied warranty of
        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        GNU Affero General Public License for more details.

        You should have received a copy of the GNU Affero General Public License
        along with Msc-generator.  If not, see <http://www.gnu.org/licenses/>.
        */

#ifdef COLOR_SYNTAX_HIGHLIGHT
#define C_S_H (1)
#define C_S_H_IS_COMPILED
#else
#define C_S_H (0)
#endif

#include <stdio.h>
#include <string.h>
#include <iostream>

#ifdef C_S_H_IS_COMPILED
#include "csh.h"
#define YYMSC_RESULT_TYPE Csh
#define RESULT csh

    //If we scan for color syntax highlight use this location
    //yyerror is defined by bison, the other is defined for flex
#define YYLTYPE_IS_DECLARED
#define YYLTYPE CshPos
#define CHAR_IF_CSH(A) char

#include "commands.h" //MSC_* defs and CommandNote and Shapes in entity.h
#include "colorsyntax.h"
#include "language_misc.h"

#else

#include "msc.h"
#define YYMSC_RESULT_TYPE Msc
#define RESULT msc

#define CHAR_IF_CSH(A) A
#include "language.h"
#include "language_misc.h"

#endif

#ifdef C_S_H_IS_COMPILED

#define YY_INPUT(buffer, res, max_size)             \
do {                                                \
    parse_parm *pp = yyget_extra(yyscanner);        \
    if (pp->pos >= pp->length)                      \
        res = YY_NULL;                              \
        else                                            \
    {                                               \
        res = pp->length - pp->pos;                 \
        res > (int)max_size ? res = max_size : 0;   \
        memcpy(buffer, pp->buf + pp->pos, res);     \
        pp->pos += res;                             \
    }                                               \
} while (0)

#define YY_USER_ACTION do {                     \
    yylloc->first_pos = yylloc->last_pos+1;     \
    yylloc->last_pos = yylloc->last_pos+yyleng; \
    /* Set initial condition according to our compatibility mode*/ \
    /* (usually changes only once after the 'msc {...}' is detected or at the beginning) */ \
    BEGIN(yyget_extra(yyscanner)->csh->mscgen_compat == EMscgenCompat::FORCE_MSCGEN ? LEX_STATE_MSCGEN_COMPAT : INITIAL); \
    } while(0);

#define YYRHSLOC(Rhs, K) ((Rhs)[K])

#define YYLLOC_DEFAULT(Current, Rhs, N)                  \
    do                                                   \
      if (YYID (N))                                      \
    {                                                    \
      (Current).first_pos = YYRHSLOC (Rhs, 1).first_pos; \
      (Current).last_pos  = YYRHSLOC (Rhs, N).last_pos;  \
    }                                                    \
      else                                               \
    {                                                    \
        (Current).first_pos = (Current).last_pos   =     \
        YYRHSLOC (Rhs, 0).last_pos;                      \
    }                                                    \
    while (YYID (0))

#else

//Read in 512-byte chunks
//We use this low value to make progress reporint more frequent
#define YY_READ_BUF_SIZE 512

#define YY_INPUT(buffer, res, max_size)             \
do {                                                \
    parse_parm *pp = yyget_extra(yyscanner);        \
    if (pp->pos >= pp->length)                      \
        res = YY_NULL;                              \
    else                                            \
    {                                               \
        res = pp->length - pp->pos;                 \
        res > (int)max_size ? res = max_size : 0;   \
        memcpy(buffer, pp->buf + pp->pos, res);     \
        pp->msc->Progress.DoneItem(MscProgress::PARSE, res); \
        pp->pos += res;                             \
    }                                               \
} while (0)

#define YY_USER_ACTION do {                              \
    yylloc->first_line = yylloc->last_line;              \
    yylloc->first_column = yylloc->last_column+1;        \
    yylloc->last_column = yylloc->first_column+yyleng-1; \
    /* Set initial condition according to our compatibility mode*/ \
    /* (usually changes only once after the 'msc {...}' is detected or at the beginning) */ \
    BEGIN(yyget_extra(yyscanner)->msc->mscgen_compat == EMscgenCompat::FORCE_MSCGEN ? LEX_STATE_MSCGEN_COMPAT : INITIAL); \
    } while(0);

#include "parse_tools.h"

#endif /* C_S_H_IS_COMPILED */

#line 1372 "<stdout>"

#define INITIAL 0
#define LEX_STATE_MSCGEN_COMPAT 1

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int yylex_init (yyscan_t* scanner);

int yylex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (yyscan_t yyscanner );

int yyget_debug (yyscan_t yyscanner );

void yyset_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra (yyscan_t yyscanner );

void yyset_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *yyget_in (yyscan_t yyscanner );

void yyset_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *yyget_out (yyscan_t yyscanner );

void yyset_out  (FILE * out_str ,yyscan_t yyscanner );

int yyget_leng (yyscan_t yyscanner );

char *yyget_text (yyscan_t yyscanner );

int yyget_lineno (yyscan_t yyscanner );

void yyset_lineno (int line_number ,yyscan_t yyscanner );

YYSTYPE * yyget_lval (yyscan_t yyscanner );

void yyset_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

       YYLTYPE *yyget_lloc (yyscan_t yyscanner );
    
        void yyset_lloc (YYLTYPE * yylloc_param ,yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (yyscan_t yyscanner );
#else
extern int yywrap (yyscan_t yyscanner );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

    static void yy_push_state (int new_state ,yyscan_t yyscanner);
    
    static void yy_pop_state (yyscan_t yyscanner );
    
    static int yy_top_state (yyscan_t yyscanner );
    
/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex \
               (YYSTYPE * yylval_param,YYLTYPE * yylloc_param ,yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 139 "language2.ll"


 /* Newline characters in all forms accepted */
#line 1627 "<stdout>"

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		yy_load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 442 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 2860 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 142 "language2.ll"

  #ifndef C_S_H_IS_COMPILED
    msc_jump_line(yylloc);
  #endif

	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 148 "language2.ll"

  #ifndef C_S_H_IS_COMPILED
    msc_jump_line(yylloc);
  #endif

	YY_BREAK
case 3:
YY_RULE_SETUP
#line 154 "language2.ll"

  #ifndef C_S_H_IS_COMPILED
    msc_jump_line(yylloc);
  #endif

	YY_BREAK
/* # starts a comment last until end of line */
case 4:
YY_RULE_SETUP
#line 161 "language2.ll"

  #ifdef C_S_H_IS_COMPILED
    yyget_extra(yyscanner)->csh->AddCSH(*yylloc, COLOR_COMMENT);
  #endif

	YY_BREAK
case 5:
YY_RULE_SETUP
#line 167 "language2.ll"
/* ignore whitespace */;
	YY_BREAK
/* These shape definition keywords are case sensitive */
case 6:
YY_RULE_SETUP
#line 170 "language2.ll"
yylval_param->shapecommand = ShapeElement::MOVE_TO; return TOK_SHAPE_COMMAND;
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 171 "language2.ll"
yylval_param->shapecommand = ShapeElement::LINE_TO; return TOK_SHAPE_COMMAND;
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 172 "language2.ll"
yylval_param->shapecommand = ShapeElement::CURVE_TO; return TOK_SHAPE_COMMAND;
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 173 "language2.ll"
yylval_param->shapecommand = ShapeElement::CLOSE_PATH; return TOK_SHAPE_COMMAND;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 174 "language2.ll"
yylval_param->shapecommand = ShapeElement::SECTION_BG; return TOK_SHAPE_COMMAND;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 175 "language2.ll"
yylval_param->shapecommand = ShapeElement::TEXT_AREA; return TOK_SHAPE_COMMAND;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 176 "language2.ll"
yylval_param->shapecommand = ShapeElement::HINT_AREA; return TOK_SHAPE_COMMAND;
	YY_BREAK
/* This is used for mscgen style loss arrow symbol -x and x-*/
case 13:
YY_RULE_SETUP
#line 179 "language2.ll"
yylval_param->str = strdup(yytext);  return TOK_REL_X;
	YY_BREAK
/* These keywords are case insensitive */
case 14:
YY_RULE_SETUP
#line 182 "language2.ll"
yylval_param->str = strdup(yytext); return TOK_MSC;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 183 "language2.ll"
yylval_param->str = strdup(yytext); return TOK_COMMAND_HEADING;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 184 "language2.ll"
yylval_param->str = strdup(yytext); return TOK_COMMAND_NUDGE;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 185 "language2.ll"
yylval_param->str = strdup(yytext); return TOK_COMMAND_DEFSHAPE;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 186 "language2.ll"
yylval_param->str = strdup(yytext); return TOK_COMMAND_DEFCOLOR;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 187 "language2.ll"
yylval_param->str = strdup(yytext); return TOK_COMMAND_DEFSTYLE;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 188 "language2.ll"
yylval_param->str = strdup(yytext); return TOK_COMMAND_DEFDESIGN;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 189 "language2.ll"
yylval_param->str = strdup(yytext); return TOK_COMMAND_NEWPAGE;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 190 "language2.ll"
yylval_param->str = strdup(yytext); return TOK_COMMAND_BIG;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 191 "language2.ll"
yylval_param->str = strdup(yytext); return TOK_COMMAND_BOX;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 192 "language2.ll"
yylval_param->str = strdup(yytext); return TOK_COMMAND_PIPE;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 193 "language2.ll"
yylval_param->str = strdup(yytext); return TOK_COMMAND_MARK;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 194 "language2.ll"
yylval_param->str = strdup(yytext); return TOK_COMMAND_PARALLEL;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 195 "language2.ll"
yylval_param->str = strdup(yytext); return TOK_COMMAND_OVERLAP;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 196 "language2.ll"
yylval_param->str = strdup(yytext); return TOK_VERTICAL;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 197 "language2.ll"
yylval_param->str = strdup(yytext); return TOK_AT;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 198 "language2.ll"
yylval_param->str = strdup(yytext); return TOK_LOST;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 199 "language2.ll"
yylval_param->str = strdup(yytext); return TOK_AT_POS;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 200 "language2.ll"
yylval_param->str = strdup(yytext); return TOK_AT_POS;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 201 "language2.ll"
yylval_param->str = strdup(yytext); return TOK_AT_POS;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 202 "language2.ll"
yylval_param->str = strdup(yytext); return TOK_SHOW;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 203 "language2.ll"
yylval_param->str = strdup(yytext); return TOK_HIDE;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 204 "language2.ll"
yylval_param->str = strdup(yytext); return TOK_ACTIVATE;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 205 "language2.ll"
yylval_param->str= strdup(yytext); return TOK_DEACTIVATE;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 206 "language2.ll"
yylval_param->str = strdup(yytext); return TOK_BYE;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 207 "language2.ll"
yylval_param->str = strdup(yytext); return TOK_COMMAND_VSPACE;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 208 "language2.ll"
yylval_param->str = strdup(yytext); return TOK_COMMAND_HSPACE;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 209 "language2.ll"
yylval_param->str = strdup(yytext); return TOK_COMMAND_SYMBOL;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 210 "language2.ll"
yylval_param->str = strdup(yytext); return TOK_COMMAND_NOTE;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 211 "language2.ll"
yylval_param->str = strdup(yytext); return TOK_COMMAND_COMMENT;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 212 "language2.ll"
yylval_param->str = strdup(yytext); return TOK_COMMAND_ENDNOTE;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 213 "language2.ll"
yylval_param->str = strdup(yytext); return TOK_COMMAND_FOOTNOTE;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 214 "language2.ll"
yylval_param->str = strdup(yytext); return TOK_COMMAND_TITLE;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 215 "language2.ll"
yylval_param->str = strdup(yytext); return TOK_COMMAND_SUBTITLE;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 216 "language2.ll"
yylval_param->str = strdup(yytext); return TOK_COMMAND_TEXT;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 217 "language2.ll"
yylval_param->str = strdup(yytext); return TOK_VERTICAL_SHAPE;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 218 "language2.ll"
yylval_param->str = strdup(yytext); return TOK_VERTICAL_SHAPE;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 219 "language2.ll"
yylval_param->str = strdup(yytext); return TOK_VERTICAL_SHAPE;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 220 "language2.ll"
yylval_param->str = strdup(yytext); return TOK_VERTICAL_SHAPE;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 221 "language2.ll"
yylval_param->str = strdup(yytext); return TOK_MSCGEN_RBOX;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 222 "language2.ll"
yylval_param->str = strdup(yytext); return TOK_MSCGEN_ABOX;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 224 "language2.ll"
yylval_param->arcsymbol = EArcSymbol::DIV_DISCO;       return TOK_SPECIAL_ARC;// ...
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 225 "language2.ll"
yylval_param->arcsymbol = EArcSymbol::DIV_DIVIDER;     return TOK_SPECIAL_ARC;// ---
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 226 "language2.ll"
yylval_param->arcsymbol = EArcSymbol::DIV_VSPACE;      return TOK_SPECIAL_ARC;// |||
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 227 "language2.ll"
yylval_param->arcsymbol = EArcSymbol::ARC_SOLID;       return TOK_REL_TO;     // ->
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 228 "language2.ll"
yylval_param->arcsymbol = EArcSymbol::ARC_SOLID;       return TOK_REL_FROM;   // <-
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 229 "language2.ll"
yylval_param->arcsymbol = EArcSymbol::ARC_SOLID_BIDIR; return TOK_REL_BIDIR;  // <->
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 230 "language2.ll"
yylval_param->arcsymbol = EArcSymbol::ARC_DOUBLE;      return TOK_REL_TO;     // =>
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 231 "language2.ll"
yylval_param->arcsymbol = EArcSymbol::ARC_DOUBLE;      return TOK_REL_FROM;   // <= 
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 232 "language2.ll"
yylval_param->arcsymbol = EArcSymbol::ARC_DOUBLE_BIDIR;return TOK_REL_BIDIR;  // <=>
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 233 "language2.ll"
yylval_param->arcsymbol = EArcSymbol::ARC_DASHED;      return TOK_REL_TO;     // >>
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 234 "language2.ll"
yylval_param->arcsymbol = EArcSymbol::ARC_DASHED;      return TOK_REL_FROM;   // <<
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 235 "language2.ll"
yylval_param->arcsymbol = EArcSymbol::ARC_DASHED_BIDIR;return TOK_REL_BIDIR;  // <<>>
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 236 "language2.ll"
yylval_param->arcsymbol = EArcSymbol::ARC_DOTTED;      return TOK_REL_TO;     // >
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 237 "language2.ll"
yylval_param->arcsymbol = EArcSymbol::ARC_DOTTED;      return TOK_REL_FROM;   // <
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 238 "language2.ll"
yylval_param->arcsymbol = EArcSymbol::ARC_DOTTED_BIDIR;return TOK_REL_BIDIR;  // <>
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 239 "language2.ll"
yylval_param->arcsymbol = EArcSymbol::ARC_DBLDBL;      return TOK_REL_TO;     // =>>
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 240 "language2.ll"
yylval_param->arcsymbol = EArcSymbol::ARC_DBLDBL;      return TOK_REL_FROM;   // <<=
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 241 "language2.ll"
yylval_param->arcsymbol = EArcSymbol::ARC_DBLDBL_BIDIR;return TOK_REL_BIDIR; // <<=>>
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 242 "language2.ll"
yylval_param->arcsymbol = EArcSymbol::ARC_DOUBLE2;      return TOK_REL_TO;    // ==>
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 243 "language2.ll"
yylval_param->arcsymbol = EArcSymbol::ARC_DOUBLE2;      return TOK_REL_FROM;  // <==
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 244 "language2.ll"
yylval_param->arcsymbol = EArcSymbol::ARC_DOUBLE2_BIDIR;return TOK_REL_BIDIR; // <==>
	YY_BREAK

case 76:
YY_RULE_SETUP
#line 247 "language2.ll"
yylval_param->arcsymbol = EArcSymbol::BOX_SOLID;       return TOK_EMPH;       // --
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 248 "language2.ll"
yylval_param->arcsymbol = EArcSymbol::BOX_DASHED;      return TOK_EMPH_PLUS_PLUS;// ++
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 249 "language2.ll"
yylval_param->arcsymbol = EArcSymbol::BOX_DOTTED;      return TOK_EMPH;       // ..
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 250 "language2.ll"
yylval_param->arcsymbol = EArcSymbol::BOX_DOUBLE;      return TOK_EMPH;       // == 
	YY_BREAK


case 80:
YY_RULE_SETUP
#line 253 "language2.ll"
yylval_param->arcsymbol = EArcSymbol::ARC_SOLID_BIDIR;  return TOK_REL_MSCGEN; // --
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 254 "language2.ll"
yylval_param->arcsymbol = EArcSymbol::ARC_DOUBLE2_BIDIR;return TOK_REL_MSCGEN; // ::
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 255 "language2.ll"
yylval_param->arcsymbol = EArcSymbol::ARC_DOTTED_BIDIR; return TOK_REL_MSCGEN; // ..
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 256 "language2.ll"
yylval_param->arcsymbol = EArcSymbol::ARC_DOUBLE_BIDIR; return TOK_REL_MSCGEN; // == 
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 257 "language2.ll"
yylval_param->arcsymbol = EArcSymbol::ARC_DOUBLE2;      return TOK_REL_TO;     // :>
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 258 "language2.ll"
yylval_param->arcsymbol = EArcSymbol::ARC_DOUBLE2;      return TOK_REL_FROM;   // <:
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 259 "language2.ll"
yylval_param->arcsymbol = EArcSymbol::ARC_DOUBLE2_BIDIR;return TOK_REL_BIDIR;  // <:>
	YY_BREAK

case 87:
YY_RULE_SETUP
#line 262 "language2.ll"
return TOK_PLUS_EQUAL;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 263 "language2.ll"
return TOK_DASH;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 264 "language2.ll"
return TOK_PLUS;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 265 "language2.ll"
return TOK_EQUAL;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 266 "language2.ll"
return TOK_COMMA;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 267 "language2.ll"
return TOK_SEMICOLON;
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 268 "language2.ll"
return TOK_OCBRACKET;
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 269 "language2.ll"
return TOK_CCBRACKET;
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 270 "language2.ll"
return TOK_OSBRACKET;
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 271 "language2.ll"
return TOK_CSBRACKET;
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 272 "language2.ll"
return TOK_ASTERISK;
	YY_BREAK
/* We need to list only those style names, which are not conforming to
  * TOK_STRING above. */
case 98:
YY_RULE_SETUP
#line 276 "language2.ll"
yylval_param->str=strdup(yytext); return TOK_STYLE_NAME;
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 277 "language2.ll"
yylval_param->str=strdup(yytext); return TOK_STYLE_NAME;
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 278 "language2.ll"
yylval_param->str=strdup(yytext); return TOK_STYLE_NAME;
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 279 "language2.ll"
yylval_param->str=strdup(yytext); return TOK_STYLE_NAME;
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 280 "language2.ll"
yylval_param->str=strdup(yytext); return TOK_STYLE_NAME;
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 281 "language2.ll"
yylval_param->str=strdup(yytext); return TOK_STYLE_NAME;
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 282 "language2.ll"
yylval_param->str=strdup(yytext); return TOK_STYLE_NAME;
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 283 "language2.ll"
yylval_param->str=strdup(yytext); return TOK_STYLE_NAME;
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 284 "language2.ll"
yylval_param->str=strdup(yytext); return TOK_STYLE_NAME;
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 285 "language2.ll"
yylval_param->str=strdup(yytext); return TOK_STYLE_NAME;
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 286 "language2.ll"
yylval_param->str=strdup(yytext); return TOK_STYLE_NAME;
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 287 "language2.ll"
yylval_param->str=strdup(yytext); return TOK_STYLE_NAME;
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 288 "language2.ll"
yylval_param->str=strdup(yytext); return TOK_STYLE_NAME;
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 289 "language2.ll"
yylval_param->str=strdup(yytext); return TOK_STYLE_NAME;
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 290 "language2.ll"
yylval_param->str=strdup(yytext); return TOK_STYLE_NAME;
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 291 "language2.ll"
yylval_param->str=strdup(yytext); return TOK_STYLE_NAME;
	YY_BREAK
/* This is a colon-quoted string, finished by a quotation mark
 ** : "<string>"
 ** <string> can contain escaped quotation marks, hashmarks, but no line breaks
 */
case 114:
YY_RULE_SETUP
#line 298 "language2.ll"

  #ifdef C_S_H_IS_COMPILED
    yylval_param->str = strdup(yytext);
  #else
    {
    /* after whitespaces we are guaranteed to have a tailing and heading quot */
    char *s = msc_remove_head_tail_whitespace(yytext+1);
    /* s now points to the heading quotation marks.
    ** Now get rid of both quotation marks */
    std::string str(s+1);
    str.erase(str.length()-1);
    /* Calculate the position of the string and prepend a location escape */
    FileLineCol pos(yyget_extra(yyscanner)->msc->current_file,
                 yylloc->first_line, yylloc->first_column + unsigned(s+1 - yytext));
    yylval_param->str = strdup((pos.Print() + str).c_str());
    }
  #endif
    return TOK_COLON_QUOTED_STRING;

	YY_BREAK
/* This is a colon-quoted string, finished by a newline (trailing context)
 ** : "<string>$
 ** <string> can contain escaped quotation marks, hashmarks, but no line breaks
 */
case 115:
YY_RULE_SETUP
#line 322 "language2.ll"

  #ifdef C_S_H_IS_COMPILED
    yylval_param->str = strdup(yytext);
    yyget_extra(yyscanner)->csh->AddCSH_ErrorAfter(*yylloc, "Missing closing quotation mark.");
  #else
    {
    /* after whitespaces we are guaranteed to have a heading quot */
    const char *s = msc_remove_head_tail_whitespace(yytext+1);
    // s now points to heading quotation mark
    FileLineCol pos(yyget_extra(yyscanner)->msc->current_file,
                 yylloc->first_line, yylloc->first_column + unsigned(s - yytext));
    yyget_extra(yyscanner)->msc->Error.Error(pos,
         "This opening quotation mark misses its closing pair. "
         "Assuming string termination at line-end.",
         "Quoted strings cannot have line breaks. Use \'\\n\' to insert a line break.");
    /* Advance pos beyond the leading quotation mark */
    pos.col++;
    yylval_param->str = strdup((pos.Print() + (s+1)).c_str());
    }
  #endif
    return TOK_COLON_QUOTED_STRING;

	YY_BREAK
/* This is a non quoted colon-string
 ** : <string>
 ** terminated by any of: [ { or ;
 ** Honors escaping of the above via a backslash
 ** Can contain quotation marks (escaped or unescaped), but can not start with it
 ** If it contains a hashmark, unescaped [ { or ; is allowed till the end of the line
 ** (representing a commented section inside a label)
 ** Not available in mscgen compatibility mode. There we use the one below
 *  \:[\t]*(((#[^\x0d\x0a]*)|[^\"\;\[\{\\]|(\\.))((#[^\x0d\x0a]*)|[^\;\[\{\\]|(\\.))*(\\)?|\\)  
 * \:[ \t]*((#[^\0xd\0xa]*|[^\"\;\{\[\\#\ \t]|(\\[^0xd0xa])))((#[^0xd0xa]*|[^\;\{\[\\#]|(\\[^0xd0xa])))*
 */
case 116:
/* rule 116 can match eol */
YY_RULE_SETUP
#line 356 "language2.ll"

  #ifdef C_S_H_IS_COMPILED
    yylval_param->str = strdup(yytext);
  #else
    yylval_param->str = msc_process_colon_string(yytext, yylloc,
                        yyget_extra(yyscanner)->msc->current_file);
  #endif
    return TOK_COLON_STRING;

	YY_BREAK
/* This is a non quoted colon-string, where no '>' or ':' follows the initial colon
 ** : <string>
 ** terminated by any of: [ { or ;
 ** Honors escaping of the above via a backslash
 ** Can contain quotation marks (escaped or unescaped), but can not start with it
 ** If it contains a hashmark, unescaped [ { or ; is allowed till the end of the line
 ** (representing a commented section inside a label)
 ** Used only in mscgen compatibility mode to separate from :> and :: arrow symbols.
 *  \:[\t]*(((#[^\x0d\x0a]*)|[^\"\;\[\{\\]|(\\.))((#[^\x0d\x0a]*)|[^\;\[\{\\]|(\\.))*(\\)?|\\)  
 * \:[ \t]*((#[^\0xd\0xa]*|[^\"\;\{\[\\#\ \t]|(\\[^0xd0xa])))((#[^0xd0xa]*|[^\;\{\[\\#]|(\\[^0xd0xa])))*
 */
case 117:
/* rule 117 can match eol */
YY_RULE_SETUP
#line 377 "language2.ll"

  #ifdef C_S_H_IS_COMPILED
    yylval_param->str = strdup(yytext);
  #else
    yylval_param->str = msc_process_colon_string(yytext, yylloc,
                        yyget_extra(yyscanner)->msc->current_file);
  #endif
    return TOK_COLON_STRING;

	YY_BREAK
/* This is a degenerate non quoted colon-string
 ** a colon followed by a solo escape or just a colon
 */
case 118:
YY_RULE_SETUP
#line 390 "language2.ll"

  #ifdef C_S_H_IS_COMPILED
    yylval_param->str = strdup(yytext);
   #else
    yylval_param->str = msc_process_colon_string(yytext, yylloc,
                        yyget_extra(yyscanner)->msc->current_file);
  #endif
    return TOK_COLON_STRING;

	YY_BREAK
/* A simple quoted string, that can have escaped quotation marks inside.*/
case 119:
YY_RULE_SETUP
#line 402 "language2.ll"

    yylval_param->str = strdup(yytext+1);
    yylval_param->str[strlen(yylval_param->str) - 1] = '\0';
    return TOK_QSTRING;

	YY_BREAK
/* A simple quoted string, missing a closing quotation mark */
case 120:
YY_RULE_SETUP
#line 409 "language2.ll"

  #ifdef C_S_H_IS_COMPILED
    yylval_param->str = strdup(yytext+1);
    yyget_extra(yyscanner)->csh->AddCSH_ErrorAfter(*yylloc, "Missing closing quotation mark.");
#else
    {
    yylval_param->str = strdup(yytext+1);
    FileLineCol pos(yyget_extra(yyscanner)->msc->current_file,
                 yylloc->first_line, yylloc->first_column);
    yyget_extra(yyscanner)->msc->Error.Error(pos,
         "This opening quotation mark misses its closing pair. "
         "Assuming string termination at line-end.",
         "Quoted strings cannot have line breaks. Use \'\\n\' to insert a line break.");
    }
  #endif
    return TOK_QSTRING;

	YY_BREAK
/* A simple quoted string with line breaks inside 
  *  Just for msc-gen compatibility */
case 121:
/* rule 121 can match eol */
YY_RULE_SETUP
#line 429 "language2.ll"

  #ifdef C_S_H_IS_COMPILED
    yylval_param->str = strdup(yytext+1);
    yylval_param->str[strlen(yylval_param->str) - 1] = '\0';
  #else
    yylval_param->str = msc_process_multiline_qstring(yytext, yylloc,
                        yyget_extra(yyscanner)->msc->current_file);
  #endif
    return TOK_QSTRING;

	YY_BREAK
/* Numbers */
case 122:
YY_RULE_SETUP
#line 442 "language2.ll"

    yylval_param->str = strdup(yytext);
    return TOK_NUMBER;

	YY_BREAK
/* Strings not ending with a dot */
case 123:
YY_RULE_SETUP
#line 448 "language2.ll"

    yylval_param->str = strdup(yytext);
    return TOK_STRING;

	YY_BREAK
/* Strings ending with a dot, not followed by a second dot 
  * Two dots one after another shall be parsed a '..' into TOK_EMPH*/
case 124:
/* rule 124 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 455 "language2.ll"

    yylval_param->str = strdup(yytext);
    return TOK_STRING;

	YY_BREAK
/* Color definitions */
/* string+-number[,number]*/
case 125:
YY_RULE_SETUP
#line 462 "language2.ll"

    yylval_param->str = strdup(yytext);
    return TOK_COLORDEF;

	YY_BREAK
/* string,number[+-number]*/
case 126:
YY_RULE_SETUP
#line 468 "language2.ll"

    yylval_param->str = strdup(yytext);
    return TOK_COLORDEF;

	YY_BREAK
/* number,number,number[,number] */
case 127:
YY_RULE_SETUP
#line 474 "language2.ll"

    yylval_param->str = strdup(yytext);
    return TOK_COLORDEF;

	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(LEX_STATE_MSCGEN_COMPAT):
#line 479 "language2.ll"
return TOK_EOF;
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 482 "language2.ll"
ECHO;
	YY_BREAK
#line 2549 "<stdout>"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 72);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 442 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 72;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 442 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 441);

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	yy_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf ,yyscanner );

	yyfree((void *) b ,yyscanner );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	int num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

    static void yy_push_state (int  new_state , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( yyg->yy_start_stack_ptr >= yyg->yy_start_stack_depth )
		{
		yy_size_t new_size;

		yyg->yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yyg->yy_start_stack_depth * sizeof( int );

		if ( ! yyg->yy_start_stack )
			yyg->yy_start_stack = (int *) yyalloc(new_size ,yyscanner );

		else
			yyg->yy_start_stack = (int *) yyrealloc((void *) yyg->yy_start_stack,new_size ,yyscanner );

		if ( ! yyg->yy_start_stack )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	yyg->yy_start_stack[yyg->yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
}

    static void yy_pop_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( --yyg->yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yyg->yy_start_stack[yyg->yy_start_stack_ptr]);
}

    static int yy_top_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	return yyg->yy_start_stack[yyg->yy_start_stack_ptr - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "yyset_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "yyset_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void yyset_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *yyget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void yyset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int yylex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */

int yylex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    yyset_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 482 "language2.ll"



/* END OF FILE */

